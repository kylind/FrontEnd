{"version":3,"sources":["public/js/received-orders.js"],"names":["define","$","ko","mapping","Item","item","self","this","name","observable","quantity","note","isChanged","subscribe","newValue","OrderModel","order","observableItems","_id","isArray","length","client","items","forEach","rate","push","i","createDate","observableArray","packingStatus","orderPackingStatus","status","orderReadyStatus","pureComputed","swiper","mySwiper","OrdersModel","orders","init","observableOrders","Array","setSwiper","needRefresh","data","buyPrice","sellPrice","removeItem","addItem","unshift","orderData","post","console","update","parent","remove","submitOrders","submitOrder","arguments","succeed","log","toJS","ordersData","parseJSON","toJSON","changedIndexs","changedOrders","filter","index","rs","newOrder","isReal","fromJS","create","markPackingStatus","orderIndex","option","type","id","$target","target","hasClass","removeOrder","newStatus","success","val","dataType","keywords","addOrder","searchedOrders","setTimeout","ajax","searchOrders","event","indexOf"],"mappings":"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","file":"received-orders.js","sourcesContent":["define(['jquery', 'knockout', 'knockout.mapping'], function($, ko, mapping) {\n\n    //ko.mapping = mapping;\n\n\n    var Item = function(item) {\n        var self = this;\n\n\n        self.name = ko.observable(item && item.name ? item.name : '');\n        self.quantity = ko.observable(item && item.quantity ? item.quantity : '1');\n        self.note = ko.observable(item && item.note ? item.note : '');\n\n\n        self.isChanged = false;\n\n        self.name.subscribe(function(newValue) {\n            self.isChanged = true;\n        })\n        self.quantity.subscribe(function(newValue) {\n            self.isChanged = true;\n        })\n\n        self.note.subscribe(function(newValue) {\n            self.isChanged = true;\n        })\n\n\n\n\n    }\n\n\n    var OrderModel = function(order) {\n        var self = this;\n        self._id = ko.observable(order && order._id ? order._id : '');\n        self.client = ko.observable(order && order.client ? order.client : '');\n        self.rate = order && order.rate ? order.rate : null;\n\n\n\n        var observableItems = [];\n\n        if (order && $.isArray(order.items) && order.items.length > 0) {\n            order.items.forEach(function(item) {\n                observableItems.push(new Item(item));\n            });\n\n        } else {\n            for (var i = 0; i < 3; i++) {\n                observableItems.push(new Item());\n            }\n\n        }\n\n\n        self.items = ko.observableArray(observableItems);\n\n        self.isChanged = false;\n        self.client.subscribe(function(newValue) {\n            self.isChanged = true;\n        });\n        self.items.subscribe(function(newValue) {\n            self.isChanged = true;\n        })\n\n        self.createDate = order && order.createDate ? order.createDate : '';\n        self.status = order && order.status ? order.status : '1RECEIVED';\n        self.packingStatus = ko.observable(order && order.packingStatus ? order.packingStatus : '1ISREADY');\n\n        self.orderPackingStatus = ko.pureComputed(function() {\n            if (self.packingStatus() == '3PACKED') {\n                return 'font-green';\n            } else if (self.packingStatus() == '2NOTREADY') {\n                return 'font-yellow';\n            } else {\n                return 'font-black';\n            }\n        });\n\n        self.orderReadyStatus = ko.pureComputed(function() {\n            if (self.packingStatus() == '2NOTREADY') {\n                return 'icon-thumbsdown font-yellow';\n            } else {\n                return 'icon-thumbsup font-black';\n            }\n        });\n\n\n    };\n\n    var OrdersModel = function(orders, mySwiper) {\n\n        var swiper = mySwiper;\n\n        var needRefresh = false;\n\n\n\n        function init(orders) {\n\n            var observableOrders = [];\n\n            if (Array.isArray(orders) && orders.length > 0) {\n                orders.forEach(function(order) {\n\n                    observableOrders.push(new OrderModel(order));\n\n                })\n            } else {\n\n                for (var i = 0; i < 30; i++) {\n                    observableOrders.push(new OrderModel());\n\n                }\n\n            }\n\n\n\n            return observableOrders;\n        }\n\n        var self = this;\n\n        self.setSwiper = function(mySwiper) {\n\n            swiper = mySwiper;\n            swiper.update();\n\n        }\n\n        var observableOrders = init(orders);\n\n        self.orders = ko.observableArray(observableOrders);\n\n        self.setOrders = function(orders) {\n\n            self.orders(init(orders));\n\n        }\n\n        self.addItem = function(data) {\n\n            data.items.unshift({\n                name: \"\",\n                quantity: 1,\n                note: '',\n                buyPrice: '',\n                sellPrice: '',\n                isDone: false\n            });\n            swiper.update();\n        };\n\n        self.removeItem = function(data, parent) {\n            parent.items.remove(data);\n            swiper.update();\n        };\n\n        self.submitOrder = function(order) {\n            arguments[3]();\n            var succeed = arguments[4];\n\n            console.log('post request....');\n\n            var orderData = ko.mapping.toJS(order); //$.parseJSON(ko.toJSON(order));\n\n            $.post('/order', orderData, function(data, status) {\n\n                    console.log('get post result');\n                    ko.mapping.fromJS(data, {}, order);\n                    succeed();\n                },\n                'json'\n            );\n\n            return false;\n\n        };\n\n        self.submitOrders = function() {\n            arguments[3]();\n            var succeed = arguments[4];\n\n\n\n            var orders = self.orders();\n            //var ordersData = ko.mapping.toJS(orders); //$.parseJSON(ko.toJSON(order));\n            var ordersData = $.parseJSON(ko.toJSON(orders))\n\n            if (Array.isArray(ordersData) && ordersData.length > 0) {\n\n                var changedIndexs = [];\n\n                var changedOrders = ordersData.filter(function(order, index) {\n\n                    var isChanged = false;\n                    var isReal = order.client == '' ? false : true;\n\n                    if (isReal) {\n                        if (order.isChanged) {\n                            isChanged = true;\n                        } else {\n                            for (var i = 0; i < order.items.length; i++) {\n                                if (order.items[i].isChanged) {\n                                    isChanged = true;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n\n                    if (isChanged) {\n                        changedIndexs.push(index);\n                    }\n\n                    return isChanged;\n\n                });\n\n                if (changedOrders.length > 0) {\n\n                    $.post('/orders', { orders: changedOrders }, function(rs, status) {\n\n\n                            rs.forEach(function(newOrder, index) {\n                                var orderIndex = changedIndexs[index];\n\n                                if ($.isArray(newOrder.items) && newOrder.items.length == 0) {\n                                    newOrder.items = [{}, {}, {}];\n                                }\n\n                                ko.mapping.fromJS(newOrder, {\n                                    items: {\n                                        create: function(option) {\n                                            return new Item(option.data);\n\n                                        }\n                                    }\n                                }, orders[orderIndex]);\n\n                                orders[orderIndex].isChanged = false;\n\n\n\n\n                            })\n\n                            succeed();\n                        },\n                        'json'\n                    );\n                } else {\n                    succeed();\n                }\n            }\n\n\n\n\n\n            return false;\n\n        };\n\n\n\n        self.markPackingStatus = function(order) {\n            arguments[3]();\n            var succeed = arguments[4];\n            var parent = arguments[1];\n            var id = order._id();\n\n            var packingStatus = order.packingStatus()\n\n            var $target = $(arguments[2].target);\n\n            var newStatus = '';\n\n            if ($target.hasClass('icon-leaf')) {\n                if (packingStatus == \"1ISREADY\") {\n                    newStatus = '3PACKED';\n                } else if (packingStatus == \"3PACKED\") {\n                    newStatus = '1ISREADY';\n                }\n            } else {\n                if (packingStatus == \"1ISREADY\" || packingStatus == \"3PACKED\") {\n                    newStatus = '2NOTREADY';\n                } else {\n                    newStatus = '1ISREADY';\n                }\n            }\n\n\n            if (newStatus == \"\") {\n                succeed();\n                return;\n            }\n\n            $.ajax('./packingStatus/' + id, {\n                success: function(data, status) {\n\n                    order.packingStatus(newStatus)\n                     needRefresh = $('#search-receivedOrders').val()==''?true:false;\n                    succeed(needRefresh);\n\n                },\n                data: {\n                    'packingStatus': newStatus\n                },\n                dataType: 'json',\n                type: 'PUT'\n\n            });\n\n        };\n\n        self.addOrder = function() {\n\n            var order = new OrderModel();\n\n            self.orders.unshift(order);\n            swiper.update();\n            $(window).scrollTop(0);\n        };\n\n        self.removeOrder = function(order) {\n\n            arguments[3]();\n            var succeed = arguments[4];\n\n            var id = order._id();\n            self.orders.remove(order);\n\n\n            if (id == '') {\n                swiper.update();\n                succeed();\n\n                return;\n            }\n\n            $.ajax('./order/' + id, {\n                success: function(data, status) {\n\n                    succeed();\n\n                },\n                dataType: 'json',\n                type: 'DELETE'\n\n            });\n            swiper.update();\n\n\n        };\n\n        var orders = null;\n        self.searchOrders = function(data, event) {\n\n            var keywords = $(event.target).val();\n            if (orders == null) {\n                orders = self.orders();\n            }\n\n            var searchedOrders = orders.filter(function(order) {\n\n                return order.client().indexOf(keywords) >= 0;\n            });\n\n\n            self.orders(searchedOrders);\n\n\n            setTimeout(function() {\n                swiper.update();\n            }, 100)\n\n\n        };\n\n    };\n\n\n\n    return OrdersModel;\n\n\n\n})\n"]}