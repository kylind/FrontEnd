{"version":3,"sources":["public/js/received-orders.js"],"names":["define","$","ko","mapping","Item","item","self","this","name","observable","quantity","note","sellPrice","isNaN","isDone","profit","isChanged","newValue","subscribe","OrderModel","order","status","_id","createDate","client","packingStatus","rate","isArray","items","length","forEach","buyPrice","observableItems","push","i","observableArray","orderReadyStatus","pureComputed","orderPackingStatus","orders","Array","observableOrders","OrdersModel","mySwiper","init","aStatus","orderA","bStatus","setSwiper","swiper","sort","orderB","setOrders","update","arguments","console","addItem","data","succeed","removeItem","parent","remove","ordersData","submitOrder","changedIndexs","log","orderData","isReal","post","fromJS","submitOrders","parseJSON","toJSON","changedOrders","newOrder","create","orderIndex","index","rs","option","markPackingStatus","newStatus","dataType","id","addOrder","target","unshift","success","type","val","sortOrders","keywords","setTimeout","removeOrder","ajax","searchOrders","event","searchedOrders","filter","indexOf"],"mappings":"YAAAA,SAAQ,SAAU,WAAY,oBAAqB,SAASC,EAAGC,EAAIC,GAK/D,GAAIC,GAAO,SAASC,GAChB,GAAIC,GAAOC,IAGXD,GAAKE,KAAON,EAAGO,WAAWJ,GAAQA,EAAKG,KAAOH,EAAKG,KAAO,IAA1DF,EAAKE,SAAUC,EAAAA,WAAWJ,GAAQA,EAARK,SAAyBF,EAAOE,SAA1D,KACAJ,EAAKI,KAAAA,EAALD,WAAmBA,GAAWJ,EAAQA,KAAKK,EAAbC,KAAwBN,IAMtDC,EAAKM,SAALP,IAAyBQ,MAACA,EAAMR,UAAfA,EAAiCA,SAAjC,GAAjBC,EAAKM,UAAYP,IAASQ,MAAMR,EAAKO,WAAaP,EAAKO,UAAY,GAGnEN,EAAKQ,OAAUT,GAAQA,EAAKS,OAALT,EAAeU,OAAxB,GAAdT,EAAKQ,UAAUT,GAAuB,aAAfA,EAAKS,SAAyBT,EAAKS,OASzDR,EAFDU,WAAA,EAIIV,EAAAA,KAAKU,UAAL,SAAAC,GADJX,EAAAU,WAAA,IAIAV,EAAKK,SAAKO,UAAU,SAASD,GACzBX,EAAKU,WAAY,IADrBV,EAAKK,KAAKO,UAAU,SAASD,GAU7BE,EAAAA,WAAa,KASbb,EAAKM,SAAYQ,GACjBd,GAAAA,GAAAC,IACAD,GAAKe,IAALnB,EAAckB,WAASA,GAAMC,EAASD,IAAMC,EAA9BC,IAAuC,IACrDhB,EAAKiB,OAAAA,EAALd,WAA2BW,GAAMG,EAAfC,OAAkCD,EAAAA,OAApD,IARAjB,EAAKmB,cAAgBvB,EAAGO,WAAWW,GAASA,EAAMK,cAAgBL,EAAMK,cAAgB,YAExFnB,EAAKoB,KAAON,GAASA,EAAMM,KAAON,EAAMM,KAAO,KAY/CpB,EAAIc,QAAWO,GAAQP,EAAMQ,QAAUR,EAAMQ,QAAMC,EAC/CT,EAAAA,SAAYU,GAAQV,EAAAW,SAAeX,EAAAW,SAAA,GAC/BC,EAAAA,UAAAA,GAAgBC,EAAKrB,UAArBQ,EAAAR,UAAA,GACHN,EAFDS,OAAAK,GAAAA,EAAAL,OAAAK,EAAAL,OAAA,GAIHT,EALDe,OAKOD,GAAAA,EAAAC,OAAAD,EAAAC,OAAA,YACHf,EAAAiB,WAAAH,GAAuBc,EAAKX,WAAAH,EAAAG,WAAA,EARhC,IAAIS,KAEJ,IAAIZ,GAASnB,EAAE0B,QAAQP,EAAMQ,QAAUR,EAAMQ,MAAMC,OAAS,EAe5DvB,EAAKU,MAALc,QAAA,SAAAzB,GACKmB,EAAiBS,KAAA,GAAShB,GAAAA,UAI3BX,KAAKU,GAAAA,GAAAA,EAALkB,EAAiB,EAAjBA,IADJF,EAAAC,KAAA,GAAA7B,GAUQE,GAAAsB,MAAA1B,EAAOiC,gBAAPH,GAEA1B,EAAAU,WAAO,EACVV,EAAAkB,OAAAN,UAAA,SAAAD,GAPLX,EAAAU,WAAA,IAUAV,EAAK8B,MAAAA,UAAL,SAA2BC,GACvB/B,EAAIA,WAAKmB,IAKZnB,EANDgC,mBAAApC,EAAAmC,aAAA,WArDJ,MAAA,WAAA/B,EAAAmB,gBA6CmB,aAmBQc,aAATjC,EAAAmB,gBAjBC,cAEA,eAIfnB,EAAK8B,iBAAmBlC,EAAGmC,aAAa,WAmBpC,MAAI,aAAAG,EAAAA,gBACOV,8BAEHW,8BAUPC,EAAA,SAAAH,EAAAI,GAjBL,QAASC,GAAKL,GAEV,GAAIE,KAEJ,IAAID,MAAMb,QAAQY,IAAWA,EAAOV,OAAS,EAsBzCU,EAAIM,QAAUC,SAAOrB,GAnBjBgB,EAAiBR,KAAK,GAAId,GAAWC,UA2BrC,KAAA,GAAAc,GAAOW,EAAAA,EAAAA,GAAQE,IAClBN,EAAAR,KAAA,GAAAd,GAQTb,OAAK0C,GAGDC,QAAAA,GAAAV,GAtBAA,EAAOW,KAAK,SAAUJ,EAAQK,GAE1B,GAAIN,GAAUC,EAAOrB,gBA0B7BsB,EAAiBZ,EAAAA,eAEZiB,OAAAA,IAAYL,EAEDH,EAAKL,YAAjBY,EAAA5B,WAAA,GAAA,EAtBesB,EAAQE,GAAU,EAAI,IAfrC,GAAAE,GAAOR,EAiDHV,EAAAA,IAEAjB,GAAAA,UAAQ,SAAA6B,GAEZM,EAAOI,EAVXJ,EAAAI,SAeIJ,IAAAA,GAAAL,EAAAL,EAzBJjC,GAAKiC,OAASrC,EAAGiC,gBAAgBM,GA6B7Ba,EAAAA,UAAA,SAAAf,GAzBAjC,EAAKiC,OAAOK,EAAKL,IA4BjBgB,EAAAA,UAtBJjD,EAAKkD,QAAU,SAASC,GA6BZvD,EAAAA,MAAGC,SACHuD,KAAAA,GAEJhD,SANJ,EArBIC,KAAM,GA8BVoB,SAAA,GAjBJnB,UAAA,GAVQE,QAAQ,IAgCZwC,EAAAA,UAKAhD,EAAAqD,WAAarD,SAAKiC,EAAlBqB,GACAA,EAAAhC,MAAAiC,OAAAJ,GACAR,EAAIa,UA7BRxD,EAAKyD,YAAc,SAAS3C,GAiCpBkC,UAAIU,IA/BR,IAAIN,GAAUJ,UAAU,EAExBC,SAAQU,IAAI,mBAkCJ,IAAAC,GAAIC,EAAAA,QAAe3C,KAAAA,EAWV,OATTvB,GAAAmE,KAAA,UAAAF,EAAY,SAAAT,EAAApC,GAEJL,QAAAA,IAAAA,mBACHd,EAAAC,QAAMkE,OAAAZ,KAAArC,GACHsC,GAAA,IAEQ1C,SAGP,GAITV,EAAAgE,aAAItD,WACAgD,UAAAA,IACH,IAAAN,GAAAJ,UAAA,GA5BLf,EAASjC,EAAKiC,SAEduB,EAAa7D,EAAEsE,UAAUrE,EAAGsE,OAAOjC,GAEvC,IAAIC,MAAMb,QAAQmC,IAAeA,EAAWjC,OAAS,EAAG,CAoCpC,GAAAmC,MAEAS,EAAM9C,EAAQ+C,OAAS9C,SAAU8C,EAAS9C,GAEzC,GAAAZ,IAAA,EAjCTmD,EAAyB,IAAhB/C,EAAMI,MAoCHI,IAAAA,EACI+C,GAAAA,EAAAA,UACI3D,GAAA,MAFD,KAAA,GAAAkB,GAAA,EAAAA,EAAAd,EAAAQ,MAAAC,OAAAK,IAMRK,GAAAA,EAAOqC,MAAP1C,GAPHlB,UAAA,CA3BIA,GAAY,CAoCT4D,OAoBpB,MARClB,IACHM,EAAA/B,KAAA4C,GAOL7D,GAOAsC,GAAAzB,OAAA,EAEI+B,EAAAA,KAASN,YAAbf,OAAAkC,GAAA,SAAAK,EAAAzD,GAGII,EAAAA,QAAsBA,SAAAA,EAA1BoD,GA/CoB,GAAID,GAAaZ,EAAca,EAE3B5E,GAAE0B,QAAQ+C,EAAS9C,QAAmC,GAAzB8C,EAAS9C,MAAMC,SAiDpE6C,EAAA9C,kBAGQH,EAAAA,QAAiB4C,OAAYK,GACjB9C,OACLH,OAAiB,SAAWsD,GACnC,MAAA,IAAA3E,GAAA2E,EAAAtB,SAIYlB,EAAAqC,IAEArC,EAAAqC,GAAZ5D,WAAA,IAQP0C,GAAA,IAEM,QAGCtC,IAQKd,OAAAA,GAQLA,EAAA0E,kBAAA,SAAiBC,GADf3B,UAlBsB,IAqB5B4B,IAAAA,GAAU5B,UArBkB,GA5B5B6B,GAkDM7B,UAAA,GAlDDlC,EAAME,OAJnBG,EAAAL,EAAAK,gBA4DK2D,EAAWnF,EAAAqD,UAAW,GAAA+B,QAEnBjE,EAAYD,EAnChB,OAqCAb,GAAYgF,SAAQlE,aACpB,YAAOiC,EACP4B,EAAoB,UANxB,WAAAxD,IA5CYwD,EAAY,YAwDhBvB,EADJ,YAAAJ,GAAA,WAAA7B,EACc6B,YAEd,WA/CiB,IAAb2B,MAsDAvB,SAIA6B,GAAAA,KAAAA,mBAASJ,GApDTI,QAAS,SAAS9B,EAAMpC,GA0DxBmE,GAPoBpE,EAAAK,cAAAwD,GAOd,IAAAhF,EAAA,0BAAAwF,MAAA,CAPV,GAAAlD,GAAAjC,EAAAiC,QAfJmD,GAAAnD,GA8BAjC,EAAAiC,OAAAA,GAIQA,GAAU,IArDVkB,MA0DDkC,cAAaV,GAEZS,SAAAA,OAxDAF,KAAM,SAgELlF,EAAA8E,SAHD,WArDJ,GAAIhE,GAAQ,GAAID,EAEhBb,GAAKiC,OAAO+C,QAAQlE,GA6DpBwE,EAAAA,SACI3C,EAAAA,QAAAA,UAAA,IA9TZ3C,EAAAuF,YAAA,SAAAzE,GAwUOsB,UAAP,IAnbJ,IAAAgB,GAAAJ,UAAA,GAqXgB6B,EAAK/D,EAAME,KAIf,OAHAhB,GAAKiC,OAAOsB,OAAOzC,GAGT,IAAN+D,MACAzB,MAKJzD,EAAE6F,KAAK,WAAaX,GAChBI,QAAS,SAAS9B,EAAMpC,GAEpBqC,GAAQ,IAGZwB,SAAU,OACVM,KAAM,eAGVvC,GAAOI,UAKX,IAAId,GAAS,IACbjC,GAAKyF,aAAe,SAAStC,EAAMuC,GAE/B,GAAIL,GAAW1F,EAAE+F,EAAMX,QAAQI,KAM/B,IALc,MAAVlD,IACAA,EAASjC,EAAKiC,UAIL,IAAVoD,EAAa,CAEZD,EAAWnD,EAEX,IAAI0D,GAAiB1D,MAGrB,IAAI0D,GAAiB1D,EAAO2D,OAAO,SAAS9E,GAExC,MAAOA,GAAMI,SAAS2E,QAAQR,IAAa,GAKnDrF,GAAKiC,OAAO0D,GAGZL,WAAW,WACP3C,EAAOI,UACR,MASX,OAAOX","file":"received-orders.js","sourcesContent":["define(['jquery', 'knockout', 'knockout.mapping'], function($, ko, mapping) {\n\n    //ko.mapping = mapping;\n\n\n    var Item = function(item) {\n        var self = this;\n\n\n        self.name = ko.observable(item && item.name ? item.name : '');\n        self.quantity = ko.observable(item && item.quantity ? item.quantity : '1');\n        self.note = ko.observable(item && item.note ? item.note : '');\n\n\n\n        self.buyPrice = item && !isNaN(item.buyPrice) ? item.buyPrice : '';\n        self.sellPrice = item && !isNaN(item.sellPrice) ? item.sellPrice : '';\n\n        self.profit = item && item.profit ? item.profit : '';\n        self.isDone = (item && item.isDone != 'undefined') ? item.isDone : false;\n\n\n\n\n        self.isChanged = false;\n\n        self.name.subscribe(function(newValue) {\n            self.isChanged = true;\n        })\n        self.quantity.subscribe(function(newValue) {\n            self.isChanged = true;\n        })\n\n        self.note.subscribe(function(newValue) {\n            self.isChanged = true;\n        })\n\n\n\n\n    }\n\n\n    var OrderModel = function(order) {\n        var self = this;\n        self._id = ko.observable(order && order._id ? order._id : '');\n        self.client = ko.observable(order && order.client ? order.client : '');\n        self.packingStatus = ko.observable(order && order.packingStatus ? order.packingStatus : '1ISREADY');\n\n        self.rate = order && order.rate ? order.rate : null;\n        self.postage = order && order.postage ? order.postage : 0;\n        self.buyPrice = order && order.buyPrice ? order.buyPrice : '';\n        self.sellPrice = order && order.sellPrice ? order.sellPrice : '';\n        self.profit = order && order.profit ? order.profit : '';\n        self.status = order && order.status ? order.status : '1RECEIVED';\n        self.createDate = order && order.createDate ? order.createDate : '';\n\n\n\n        var observableItems = [];\n\n        if (order && $.isArray(order.items) && order.items.length > 0) {\n            order.items.forEach(function(item) {\n                observableItems.push(new Item(item));\n            });\n\n        } else {\n            for (var i = 0; i < 3; i++) {\n                observableItems.push(new Item());\n            }\n\n        }\n\n\n        self.items = ko.observableArray(observableItems);\n\n        self.isChanged = false;\n        self.client.subscribe(function(newValue) {\n            self.isChanged = true;\n        });\n        self.items.subscribe(function(newValue) {\n            self.isChanged = true;\n        })\n\n\n\n        self.orderPackingStatus = ko.pureComputed(function() {\n            if (self.packingStatus() == '3PACKED') {\n                return 'font-green';\n            } else if (self.packingStatus() == '2NOTREADY') {\n                return 'font-yellow';\n            } else {\n                return 'font-black';\n            }\n        });\n\n        self.orderReadyStatus = ko.pureComputed(function() {\n            if (self.packingStatus() == '2NOTREADY') {\n                return 'icon-thumbsdown font-yellow';\n            } else {\n                return 'icon-thumbsup font-black';\n            }\n        });\n\n\n    };\n\n    var OrdersModel = function(orders, mySwiper) {\n\n        var swiper = mySwiper;\n\n        function init(orders) {\n\n            var observableOrders = [];\n\n            if (Array.isArray(orders) && orders.length > 0) {\n                orders.forEach(function(order) {\n\n                    observableOrders.push(new OrderModel(order));\n\n                })\n            } else {\n\n                for (var i = 0; i < 30; i++) {\n                    observableOrders.push(new OrderModel());\n\n                }\n\n            }\n\n            return observableOrders;\n        }\n\n        function sortOrders (orders){\n\n            orders.sort(function( orderA, orderB){\n\n                var aStatus = orderA.packingStatus();\n                var bStatus = orderB.packingStatus()\n\n                if(aStatus==bStatus){\n\n                    return orderA.createDate <= orderB.createDate ? 1 : -1;\n\n                }else{\n                    return aStatus<bStatus ? -1: 1;\n                }\n\n            })\n\n        }\n\n        var self = this;\n\n        self.setSwiper = function(mySwiper) {\n\n            swiper = mySwiper;\n            swiper.update();\n\n        }\n\n        var observableOrders = init(orders);\n\n        self.orders = ko.observableArray(observableOrders);\n\n        self.setOrders = function(orders) {\n\n            self.orders(init(orders));\n            swiper.update();\n\n\n        }\n\n        self.addItem = function(data) {\n\n            data.items.unshift({\n                name: \"\",\n                quantity: 1,\n                note: '',\n                buyPrice: '',\n                sellPrice: '',\n                isDone: false\n            });\n            swiper.update();\n        };\n\n        self.removeItem = function(data, parent) {\n            parent.items.remove(data);\n            swiper.update();\n        };\n\n        self.submitOrder = function(order) {\n            arguments[3]();\n            var succeed = arguments[4];\n\n            console.log('post request....');\n\n            var orderData = ko.mapping.toJS(order); //$.parseJSON(ko.toJSON(order));\n\n            $.post('./order', orderData, function(data, status) {\n\n                    console.log('get post result');\n                    ko.mapping.fromJS(data, {}, order);\n                    succeed(true);\n                },\n                'json'\n            );\n\n            return false;\n\n        };\n\n        self.submitOrders = function() {\n            arguments[3]();\n            var succeed = arguments[4];\n\n\n\n            var orders = self.orders();\n            //var ordersData = ko.mapping.toJS(orders); //$.parseJSON(ko.toJSON(order));\n            var ordersData = $.parseJSON(ko.toJSON(orders))\n\n            if (Array.isArray(ordersData) && ordersData.length > 0) {\n\n                var changedIndexs = [];\n\n                var changedOrders = ordersData.filter(function(order, index) {\n\n                    var isChanged = false;\n                    var isReal = order.client == '' ? false : true;\n\n                    if (isReal) {\n                        if (order.isChanged) {\n                            isChanged = true;\n                        } else {\n                            for (var i = 0; i < order.items.length; i++) {\n                                if (order.items[i].isChanged) {\n                                    isChanged = true;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n\n                    if (isChanged) {\n                        changedIndexs.push(index);\n                    }\n\n                    return isChanged;\n\n                });\n\n                if (changedOrders.length > 0) {\n\n                    $.post('./orders', { orders: changedOrders }, function(rs, status) {\n\n\n                            rs.forEach(function(newOrder, index) {\n                                var orderIndex = changedIndexs[index];\n\n                                if ($.isArray(newOrder.items) && newOrder.items.length == 0) {\n                                    newOrder.items = [{}, {}, {}];\n                                }\n\n                                ko.mapping.fromJS(newOrder, {\n                                    items: {\n                                        create: function(option) {\n                                            return new Item(option.data);\n\n                                        }\n                                    }\n                                }, orders[orderIndex]);\n\n                                orders[orderIndex].isChanged = false;\n\n\n\n\n                            })\n\n                            succeed(true);\n                        },\n                        'json'\n                    );\n                } else {\n                    succeed();\n                }\n            }\n\n\n\n\n\n            return false;\n\n        };\n\n\n\n        self.markPackingStatus = function(order) {\n            arguments[3]();\n            var succeed = arguments[4];\n            var parent = arguments[1];\n            var id = order._id();\n\n            var packingStatus = order.packingStatus()\n\n            var $target = $(arguments[2].target);\n\n            var newStatus = '';\n\n            if ($target.hasClass('icon-leaf')) {\n                if (packingStatus == \"1ISREADY\") {\n                    newStatus = '3PACKED';\n                } else if (packingStatus == \"3PACKED\") {\n                    newStatus = '1ISREADY';\n                }\n            } else {\n                if (packingStatus == \"1ISREADY\" || packingStatus == \"3PACKED\") {\n                    newStatus = '2NOTREADY';\n                } else {\n                    newStatus = '1ISREADY';\n                }\n            }\n\n\n            if (newStatus == \"\") {\n                succeed();\n                return;\n            }\n\n            $.ajax('./packingStatus/' + id, {\n                success: function(data, status) {\n\n                    order.packingStatus(newStatus)\n\n                    if($('#search-receivedOrders').val()==''){\n\n                        var  orders= self.orders();\n\n                        sortOrders(orders);\n\n                         self.orders(orders);\n\n                    }\n\n                    succeed(true);\n\n                },\n                data: {\n                    'packingStatus': newStatus\n                },\n                dataType: 'json',\n                type: 'PUT'\n\n            });\n\n        };\n\n        self.addOrder = function() {\n\n            var order = new OrderModel();\n\n            self.orders.unshift(order);\n            swiper.update();\n            $(window).scrollTop(0);\n        };\n\n        self.removeOrder = function(order) {\n\n            arguments[3]();\n            var succeed = arguments[4];\n\n            var id = order._id();\n            self.orders.remove(order);\n\n\n            if (id == '') {\n                succeed();\n\n                return;\n            }\n\n            $.ajax('./order/' + id, {\n                success: function(data, status) {\n\n                    succeed(true);\n\n                },\n                dataType: 'json',\n                type: 'DELETE'\n\n            });\n            swiper.update();\n\n\n        };\n\n        var orders = null;\n        self.searchOrders = function(data, event) {\n\n            var keywords = $(event.target).val();\n            if (orders == null) {\n                orders = self.orders();\n            }\n\n\n            if(keywords==''){\n\n                sortOrders(orders);\n\n                var searchedOrders = orders;\n\n            }else{\n                var searchedOrders = orders.filter(function(order) {\n\n                    return order.client().indexOf(keywords) >= 0;\n                });\n            }\n\n\n            self.orders(searchedOrders);\n\n\n            setTimeout(function() {\n                swiper.update();\n            }, 100)\n\n\n        };\n\n    };\n\n\n\n    return OrdersModel;\n\n\n\n})\n"]}