{"version":3,"sources":["public/js/received-orders.js"],"names":["define","$","ko","mapping","Item","item","self","this","name","observable","quantity","note","isChanged","subscribe","newValue","OrderModel","order","observableItems","_id","isArray","length","client","items","forEach","rate","push","i","createDate","observableArray","packingStatus","orderPackingStatus","status","orderReadyStatus","pureComputed","swiper","mySwiper","OrdersModel","orders","observableOrders","Array","sortOrders","bStatus","orderB","sort","orderA","aStatus","init","addItem","data","unshift","removeItem","update","orderData","post","buyPrice","console","parent","remove","submitOrders","submitOrder","arguments","succeed","log","toJS","isReal","ordersData","parseJSON","toJSON","changedIndexs","changedOrders","filter","index","rs","newOrder","fromJS","create","markPackingStatus","orderIndex","option","id","newStatus","dataType","target","$target","hasClass","addOrder","success","val","searchOrders","window","scrollTop","searchedOrders","setTimeout","ajax","type","event","keywords","indexOf"],"mappings":"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","file":"received-orders.js","sourcesContent":["define(['jquery', 'knockout', 'knockout.mapping'], function($, ko, mapping) {\n\n    //ko.mapping = mapping;\n\n\n    var Item = function(item) {\n        var self = this;\n\n\n        self.name = ko.observable(item && item.name ? item.name : '');\n        self.quantity = ko.observable(item && item.quantity ? item.quantity : '1');\n        self.note = ko.observable(item && item.note ? item.note : '');\n\n\n        self.isChanged = false;\n\n        self.name.subscribe(function(newValue) {\n            self.isChanged = true;\n        })\n        self.quantity.subscribe(function(newValue) {\n            self.isChanged = true;\n        })\n\n        self.note.subscribe(function(newValue) {\n            self.isChanged = true;\n        })\n\n\n\n\n    }\n\n\n    var OrderModel = function(order) {\n        var self = this;\n        self._id = ko.observable(order && order._id ? order._id : '');\n        self.client = ko.observable(order && order.client ? order.client : '');\n        self.rate = order && order.rate ? order.rate : null;\n\n\n\n        var observableItems = [];\n\n        if (order && $.isArray(order.items) && order.items.length > 0) {\n            order.items.forEach(function(item) {\n                observableItems.push(new Item(item));\n            });\n\n        } else {\n            for (var i = 0; i < 3; i++) {\n                observableItems.push(new Item());\n            }\n\n        }\n\n\n        self.items = ko.observableArray(observableItems);\n\n        self.isChanged = false;\n        self.client.subscribe(function(newValue) {\n            self.isChanged = true;\n        });\n        self.items.subscribe(function(newValue) {\n            self.isChanged = true;\n        })\n\n        self.createDate = order && order.createDate ? order.createDate : '';\n        self.status = order && order.status ? order.status : '1RECEIVED';\n        self.packingStatus = ko.observable(order && order.packingStatus ? order.packingStatus : '1ISREADY');\n\n        self.orderPackingStatus = ko.pureComputed(function() {\n            if (self.packingStatus() == '3PACKED') {\n                return 'font-green';\n            } else if (self.packingStatus() == '2NOTREADY') {\n                return 'font-yellow';\n            } else {\n                return 'font-black';\n            }\n        });\n\n        self.orderReadyStatus = ko.pureComputed(function() {\n            if (self.packingStatus() == '2NOTREADY') {\n                return 'icon-thumbsdown font-yellow';\n            } else {\n                return 'icon-thumbsup font-black';\n            }\n        });\n\n\n    };\n\n    var OrdersModel = function(orders, mySwiper) {\n\n        var swiper = mySwiper;\n\n        function init(orders) {\n\n            var observableOrders = [];\n\n            if (Array.isArray(orders) && orders.length > 0) {\n                orders.forEach(function(order) {\n\n                    observableOrders.push(new OrderModel(order));\n\n                })\n            } else {\n\n                for (var i = 0; i < 30; i++) {\n                    observableOrders.push(new OrderModel());\n\n                }\n\n            }\n\n            return observableOrders;\n        }\n\n        function sortOrders (orders){\n\n            orders.sort(function( orderA, orderB){\n\n                var aStatus = orderA.packingStatus();\n                var bStatus = orderB.packingStatus()\n\n                if(aStatus==bStatus){\n\n                    return orderA.createDate <= orderB.createDate ? 1 : -1;\n\n                }else{\n                    return aStatus<bStatus ? -1: 1;\n                }\n\n            })\n\n        }\n\n        var self = this;\n\n        self.setSwiper = function(mySwiper) {\n\n            swiper = mySwiper;\n            swiper.update();\n\n        }\n\n        var observableOrders = init(orders);\n\n        self.orders = ko.observableArray(observableOrders);\n\n        self.setOrders = function(orders) {\n\n            self.orders(init(orders));\n            swiper.update();\n\n\n        }\n\n        self.addItem = function(data) {\n\n            data.items.unshift({\n                name: \"\",\n                quantity: 1,\n                note: '',\n                buyPrice: '',\n                sellPrice: '',\n                isDone: false\n            });\n            swiper.update();\n        };\n\n        self.removeItem = function(data, parent) {\n            parent.items.remove(data);\n            swiper.update();\n        };\n\n        self.submitOrder = function(order) {\n            arguments[3]();\n            var succeed = arguments[4];\n\n            console.log('post request....');\n\n            var orderData = ko.mapping.toJS(order); //$.parseJSON(ko.toJSON(order));\n\n            $.post('/order', orderData, function(data, status) {\n\n                    console.log('get post result');\n                    ko.mapping.fromJS(data, {}, order);\n                    succeed(true);\n                },\n                'json'\n            );\n\n            return false;\n\n        };\n\n        self.submitOrders = function() {\n            arguments[3]();\n            var succeed = arguments[4];\n\n\n\n            var orders = self.orders();\n            //var ordersData = ko.mapping.toJS(orders); //$.parseJSON(ko.toJSON(order));\n            var ordersData = $.parseJSON(ko.toJSON(orders))\n\n            if (Array.isArray(ordersData) && ordersData.length > 0) {\n\n                var changedIndexs = [];\n\n                var changedOrders = ordersData.filter(function(order, index) {\n\n                    var isChanged = false;\n                    var isReal = order.client == '' ? false : true;\n\n                    if (isReal) {\n                        if (order.isChanged) {\n                            isChanged = true;\n                        } else {\n                            for (var i = 0; i < order.items.length; i++) {\n                                if (order.items[i].isChanged) {\n                                    isChanged = true;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n\n                    if (isChanged) {\n                        changedIndexs.push(index);\n                    }\n\n                    return isChanged;\n\n                });\n\n                if (changedOrders.length > 0) {\n\n                    $.post('/orders', { orders: changedOrders }, function(rs, status) {\n\n\n                            rs.forEach(function(newOrder, index) {\n                                var orderIndex = changedIndexs[index];\n\n                                if ($.isArray(newOrder.items) && newOrder.items.length == 0) {\n                                    newOrder.items = [{}, {}, {}];\n                                }\n\n                                ko.mapping.fromJS(newOrder, {\n                                    items: {\n                                        create: function(option) {\n                                            return new Item(option.data);\n\n                                        }\n                                    }\n                                }, orders[orderIndex]);\n\n                                orders[orderIndex].isChanged = false;\n\n\n\n\n                            })\n\n                            succeed(true);\n                        },\n                        'json'\n                    );\n                } else {\n                    succeed();\n                }\n            }\n\n\n\n\n\n            return false;\n\n        };\n\n\n\n        self.markPackingStatus = function(order) {\n            arguments[3]();\n            var succeed = arguments[4];\n            var parent = arguments[1];\n            var id = order._id();\n\n            var packingStatus = order.packingStatus()\n\n            var $target = $(arguments[2].target);\n\n            var newStatus = '';\n\n            if ($target.hasClass('icon-leaf')) {\n                if (packingStatus == \"1ISREADY\") {\n                    newStatus = '3PACKED';\n                } else if (packingStatus == \"3PACKED\") {\n                    newStatus = '1ISREADY';\n                }\n            } else {\n                if (packingStatus == \"1ISREADY\" || packingStatus == \"3PACKED\") {\n                    newStatus = '2NOTREADY';\n                } else {\n                    newStatus = '1ISREADY';\n                }\n            }\n\n\n            if (newStatus == \"\") {\n                succeed();\n                return;\n            }\n\n            $.ajax('./packingStatus/' + id, {\n                success: function(data, status) {\n\n                    order.packingStatus(newStatus)\n\n                    if($('#search-receivedOrders').val()==''){\n\n                        var  orders= self.orders();\n\n                        sortOrders(orders);\n\n                         self.orders(orders);\n\n                    }\n\n                    succeed();\n\n                },\n                data: {\n                    'packingStatus': newStatus\n                },\n                dataType: 'json',\n                type: 'PUT'\n\n            });\n\n        };\n\n        self.addOrder = function() {\n\n            var order = new OrderModel();\n\n            self.orders.unshift(order);\n            swiper.update();\n            $(window).scrollTop(0);\n        };\n\n        self.removeOrder = function(order) {\n\n            arguments[3]();\n            var succeed = arguments[4];\n\n            var id = order._id();\n            self.orders.remove(order);\n\n\n            if (id == '') {\n                succeed();\n\n                return;\n            }\n\n            $.ajax('./order/' + id, {\n                success: function(data, status) {\n\n                    succeed(true);\n\n                },\n                dataType: 'json',\n                type: 'DELETE'\n\n            });\n            swiper.update();\n\n\n        };\n\n        var orders = null;\n        self.searchOrders = function(data, event) {\n\n            var keywords = $(event.target).val();\n            if (orders == null) {\n                orders = self.orders();\n            }\n\n\n            if(keywords==''){\n\n                sortOrders(orders);\n\n                var searchedOrders = orders;\n\n            }else{\n                var searchedOrders = orders.filter(function(order) {\n\n                    return order.client().indexOf(keywords) >= 0;\n                });\n            }\n\n\n            self.orders(searchedOrders);\n\n\n            setTimeout(function() {\n                swiper.update();\n            }, 100)\n\n\n        };\n\n    };\n\n\n\n    return OrdersModel;\n\n\n\n})\n"]}