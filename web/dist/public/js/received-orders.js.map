{"version":3,"sources":["public/js/received-orders.js"],"names":["define","$","ko","mapping","Item","item","self","this","name","observable","quantity","note","sellPrice","isNaN","isDone","profit","tag","isChanged","newValue","subscribe","OrderModel","order","status","_id","createDate","client","packingStatus","rate","isArray","items","length","forEach","buyPrice","observableItems","push","i","observableArray","orderReadyStatus","pureComputed","orderPackingStatus","orders","Array","observableOrders","OrdersModel","mySwiper","init","aStatus","orderA","bStatus","setSwiper","swiper","sort","orderB","setOrders","update","succeed","arguments","isInitial","console","addItem","data","removeItem","parent","remove","ordersData","submitOrder","changedIndexs","log","orderData","isReal","post","fromJS","submitOrders","parseJSON","toJSON","changedOrders","newOrder","create","orderIndex","index","rs","option","markPackingStatus","newStatus","dataType","id","addOrder","target","unshift","success","type","val","sortOrders","keywords","setTimeout","removeOrder","ajax","searchOrders","event","searchedOrders","filter","indexOf"],"mappings":"YAAAA,SAAQ,SAAU,WAAY,oBAAqB,SAASC,EAAGC,EAAIC,GAK/D,GAAIC,GAAO,SAASC,GAChB,GAAIC,GAAOC,IAGXD,GAAKE,KAAON,EAAGO,WAAWJ,GAAQA,EAAKG,KAAOH,EAAKG,KAAO,IAA1DF,EAAKE,SAAUC,EAAAA,WAAWJ,GAAQA,EAARK,SAAyBF,EAAOE,SAA1D,KACAJ,EAAKI,KAAAA,EAALD,WAAmBA,GAAWJ,EAAQA,KAAKK,EAAbC,KAAwBN,IAMtDC,EAAKM,SAALP,IAAyBQ,MAACA,EAAMR,UAAfA,EAAiCA,SAAjC,GAAjBC,EAAKM,UAAYP,IAASQ,MAAMR,EAAKO,WAAaP,EAAKO,UAAY,GAGnEN,EAAKQ,OAAUT,GAAQA,EAAAU,OAAYD,EAAZC,OAAsB,GAC7CT,EAAKU,UAAMX,GAAX,mBAA8BA,GAAKW,SAAnCX,EAAAS,OAAAR,EAAKU,IAAMX,GAAQA,EAAKW,IAAMX,EAAKW,IAAM,GASxCV,EAFDW,WAAA,EAIIX,EAAAA,KAAKW,UAAL,SAAAC,GADJZ,EAAAW,WAAA,IAIAX,EAAKK,SAAKQ,UAAU,SAASD,GACzBZ,EAAKW,WAAY,IADrBX,EAAKK,KAAKQ,UAAU,SAASD,GAU7BE,EAAAA,WAAa,KASbd,EAAKM,SAAYS,GACjBf,GAAAA,GAAAC,IACAD,GAAKgB,IAALpB,EAAcmB,WAASA,GAAMC,EAASD,IAAMC,EAA9BC,IAAuC,IACrDjB,EAAKkB,OAAAA,EAALf,WAA2BY,GAAMG,EAAfC,OAAkCD,EAAAA,OAApD,IARAlB,EAAKoB,cAAgBxB,EAAGO,WAAWY,GAASA,EAAMK,cAAgBL,EAAMK,cAAgB,YAExFpB,EAAKqB,KAAON,GAASA,EAAMM,KAAON,EAAMM,KAAO,KAY/CrB,EAAIe,QAAWO,GAAQP,EAAMQ,QAAUR,EAAMQ,QAAMC,EAC/CT,EAAAA,SAAYU,GAAQV,EAAAW,SAAeX,EAAAW,SAAA,GAC/BC,EAAAA,UAAAA,GAAgBC,EAAKtB,UAArBS,EAAAT,UAAA,GACHN,EAFDS,OAAAM,GAAAA,EAAAN,OAAAM,EAAAN,OAAA,GAIHT,EALDgB,OAKOD,GAAAA,EAAAC,OAAAD,EAAAC,OAAA,YACHhB,EAAAkB,WAAAH,GAAuBc,EAAKX,WAAAH,EAAAG,WAAA,EARhC,IAAIS,KAEJ,IAAIZ,GAASpB,EAAE2B,QAAQP,EAAMQ,QAAUR,EAAMQ,MAAMC,OAAS,EAe5DxB,EAAKW,MAALc,QAAA,SAAA1B,GACKoB,EAAiBS,KAAA,GAAShB,GAAAA,UAI3BZ,KAAKW,GAAAA,GAAAA,EAALkB,EAAiB,EAAjBA,IADJF,EAAAC,KAAA,GAAA9B,GAUQE,GAAAuB,MAAA3B,EAAOkC,gBAAPH,GAEA3B,EAAAW,WAAO,EACVX,EAAAmB,OAAAN,UAAA,SAAAD,GAPLZ,EAAAW,WAAA,IAUAX,EAAK+B,MAAAA,UAAL,SAA2BC,GACvBhC,EAAIA,WAAKoB,IAKZpB,EANDiC,mBAAArC,EAAAoC,aAAA,WArDJ,MAAA,WAAAhC,EAAAoB,gBA6CmB,aAmBQc,aAATlC,EAAAoB,gBAjBC,cAEA,eAIfpB,EAAK+B,iBAAmBnC,EAAGoC,aAAa,WAmBpC,MAAI,aAAAG,EAAAA,gBACOV,8BAEHW,8BAUPC,EAAA,SAAAH,EAAAI,GAjBL,QAASC,GAAKL,GAEV,GAAIE,KAEJ,IAAID,MAAMb,QAAQY,IAAWA,EAAOV,OAAS,EAsBzCU,EAAIM,QAAUC,SAAOrB,GAnBjBgB,EAAiBR,KAAK,GAAId,GAAWC,UA2BrC,KAAA,GAAAc,GAAOW,EAAAA,EAAAA,GAAUE,IACpBN,EAAAR,KAAA,GAAAd,GAQTd,OAAK2C,GAGDC,QAAAA,GAAAV,GAtBAA,EAAOW,KAAK,SAASJ,EAAQK,GAEzB,GAAIN,GAAUC,EAAOrB,gBA0B7BsB,EAAiBZ,EAAAA,eAGZiB,OAAAA,IAAYL,EAEDH,EAAKL,YAAjBY,EAAA5B,WAAA,GAAA,EAvBesB,EAAUE,GAAU,EAAK,IAfxC,GAAAE,GAAOR,EAiDHV,EAAAA,IAEAlB,GAAAA,UAAQ,SAAA8B,GAEZM,EAAOI,EAVXJ,EAAAI,SAeIJ,IAAAA,GAAAL,EAAAL,EAzBJlC,GAAKkC,OAAStC,EAAGkC,gBAAgBM,GA8B7BpC,EAAA+C,UAAIE,SAAUC,EAAdC,GAEAC,EAAAA,OAAYb,EAAAL,IA1BZU,EAAOI,UAIXhD,EAAKqD,QAAU,SAASC,GA6BZ1D,EAAAA,MAAGC,SACHoD,KAAAA,GAEJ7C,SANJ,EArBIC,KAAM,GA8BVqB,SAAA,GAjBJpB,UAAA,GAVQE,QAAQ,IAgCZ0C,EAAAA,UAKAlD,EAAAuD,WAAavD,SAAKkC,EAAlBsB,GACAA,EAAAjC,MAAAkC,OAAAH,GACAV,EAAIc,UA7BR1D,EAAK2D,YAAc,SAAS5C,GAiCpBmC,UAAIU,IA/BR,IAAIX,GAAUC,UAAU,EAExBE,SAAQS,IAAI,mBAkCJ,IAAAC,GAAIC,EAAAA,QAAe5C,KAAAA,EAWV,OATTxB,GAAAqE,KAAA,UAAAF,EAAY,SAAAR,EAAAtC,GAEJL,QAAAA,IAAAA,mBACHf,EAAAC,QAAMoE,OAAAX,KAAAvC,GACHkC,KAEQtC,SAGP,GAITX,EAAAkE,aAAIvD,WACAiD,UAAAA,IACH,IAAAX,GAAAC,UAAA,GA5BLhB,EAASlC,EAAKkC,SAEdwB,EAAa/D,EAAEwE,UAAUvE,EAAGwE,OAAOlC,GAEvC,IAAIC,MAAMb,QAAQoC,IAAeA,EAAWlC,OAAS,EAAG,CAoCpC,GAAAoC,MAEAS,EAAM/C,EAAQgD,OAAS/C,SAAU+C,EAAS/C,GAEzC,GAAAZ,IAAA,EAjCToD,EAAyB,IAAhBhD,EAAMI,MAoCHI,IAAAA,EACIgD,GAAAA,EAAAA,UACI5D,GAAA,MAFD,KAAA,GAAAkB,GAAA,EAAAA,EAAAd,EAAAQ,MAAAC,OAAAK,IAMRK,GAAAA,EAAOsC,MAAP3C,GAPHlB,UAAA,CA3BIA,GAAY,CAoCT6D,OAoBpB,MARCvB,IACHW,EAAAhC,KAAA6C,GAOL9D,GAOAuC,GAAA1B,OAAA,EAEIgC,EAAAA,KAASN,YAAbhB,OAAAmC,GAAA,SAAAK,EAAA1D,GAGII,EAAAA,QAAsBA,SAAAA,EAA1BqD,GA/CoB,GAAID,GAAaZ,EAAca,EAE3B9E,GAAE2B,QAAQgD,EAAS/C,QAAmC,GAAzB+C,EAAS/C,MAAMC,SAiDpE8C,EAAA/C,kBAGQH,EAAAA,QAAiB6C,OAAYK,GACjB/C,OACLH,OAAiB,SAAWuD,GACnC,MAAA,IAAA7E,GAAA6E,EAAArB,SAIYpB,EAAAsC,IAEAtC,EAAAsC,GAAZ7D,WAAA,IAQPsC,KAEM,QAGClC,IAQIf,OAAAA,GAQJA,EAAA4E,kBAAA,SAAiBC,GADf3B,UAlBsB,IAqB5B4B,IAAAA,GAAU5B,UArBkB,GA5B5B6B,GAkDM7B,UAAA,GAlDDnC,EAAME,OAJnBG,EAAAL,EAAAK,gBA4DK4D,EAAWrF,EAAAuD,UAAW,GAAA+B,QAEnBlE,EAAYD,EAnChB,OAqCAd,GAAYkF,SAAQnE,aACpB,YAAOiC,EACP6B,EAAoB,UANxB,WAAAzD,IA5CYyD,EAAY,YAwDhB5B,EADJ,YAAAC,GAAA,WAAA9B,EACc8B,YAEd,WA/CiB,IAAb2B,MAsDA5B,SAIAkC,GAAAA,KAAAA,mBAASJ,GApDTI,QAAS,SAAS7B,EAAMtC,GA0DxBoE,GAPoBrE,EAAAK,cAAAyD,GAOd,IAAAlF,EAAA,0BAAA0F,MAAA,CAPV,GAAAnD,GAAAlC,EAAAkC,QAfJoD,GAAApD,GA8BalC,EAAbkC,OAAAA,GAIQA,KArDAoB,MA0DAiC,cAAgBV,GAEhBS,SAAAA,OAxDAF,KAAM,SAgELpF,EAAAgF,SAHD,WArDJ,GAAIjE,GAAQ,GAAID,EAEhBd,GAAKkC,OAAOgD,QAAQnE,GA6DpByE,EAAAA,SACI5C,EAAAA,QAAAA,UAAA,IA9TZ5C,EAAAyF,YAAA,SAAA1E,GAwUOsB,UAAP,IApbJ,IAAAY,GAAAC,UAAA,GAsXgB6B,EAAKhE,EAAME,KAIf,OAHAjB,GAAKkC,OAAOuB,OAAO1C,GAGT,IAANgE,MACA9B,MAKJtD,EAAE+F,KAAK,WAAaX,GAChBI,QAAS,SAAS7B,EAAMtC,GAEpBiC,KAGJ6B,SAAU,OACVM,KAAM,eAGVxC,GAAOI,UAKX,IAAId,GAAS,IACblC,GAAK2F,aAAe,SAASrC,EAAMsC,GAE/B,GAAIL,GAAW5F,EAAEiG,EAAMX,QAAQI,KAM/B,IALc,MAAVnD,IACAA,EAASlC,EAAKkC,UAIF,IAAZqD,EAAgB,CAEhBD,EAAWpD,EAEX,IAAI2D,GAAiB3D,MAGrB,IAAI2D,GAAiB3D,EAAO4D,OAAO,SAAS/E,GAExC,MAAOA,GAAMI,SAAS4E,QAAQR,IAAa,GAKnDvF,GAAKkC,OAAO2D,GAGZL,WAAW,WACP5C,EAAOI,UACR,MASX,OAAOX","file":"received-orders.js","sourcesContent":["define(['jquery', 'knockout', 'knockout.mapping'], function($, ko, mapping) {\n\n    //ko.mapping = mapping;\n\n\n    var Item = function(item) {\n        var self = this;\n\n\n        self.name = ko.observable(item && item.name ? item.name : '');\n        self.quantity = ko.observable(item && item.quantity ? item.quantity : '1');\n        self.note = ko.observable(item && item.note ? item.note : '');\n\n\n\n        self.buyPrice = item && !isNaN(item.buyPrice) ? item.buyPrice : '';\n        self.sellPrice = item && !isNaN(item.sellPrice) ? item.sellPrice : '';\n\n        self.profit = item && item.profit ? item.profit : '';\n        self.isDone = (item && typeof item.isDone != 'undefined') ? item.isDone : false;\n        self.tag = item && item.tag ? item.tag : '';\n\n\n\n\n        self.isChanged = false;\n\n        self.name.subscribe(function(newValue) {\n            self.isChanged = true;\n        })\n        self.quantity.subscribe(function(newValue) {\n            self.isChanged = true;\n        })\n\n        self.note.subscribe(function(newValue) {\n            self.isChanged = true;\n        })\n\n\n\n\n    }\n\n\n    var OrderModel = function(order) {\n        var self = this;\n        self._id = ko.observable(order && order._id ? order._id : '');\n        self.client = ko.observable(order && order.client ? order.client : '');\n        self.packingStatus = ko.observable(order && order.packingStatus ? order.packingStatus : '1ISREADY');\n\n        self.rate = order && order.rate ? order.rate : null;\n        self.postage = order && order.postage ? order.postage : 0;\n        self.buyPrice = order && order.buyPrice ? order.buyPrice : '';\n        self.sellPrice = order && order.sellPrice ? order.sellPrice : '';\n        self.profit = order && order.profit ? order.profit : '';\n        self.status = order && order.status ? order.status : '1RECEIVED';\n        self.createDate = order && order.createDate ? order.createDate : '';\n\n\n\n        var observableItems = [];\n\n        if (order && $.isArray(order.items) && order.items.length > 0) {\n            order.items.forEach(function(item) {\n                observableItems.push(new Item(item));\n            });\n\n        } else {\n            for (var i = 0; i < 3; i++) {\n                observableItems.push(new Item());\n            }\n\n        }\n\n\n        self.items = ko.observableArray(observableItems);\n\n        self.isChanged = false;\n        self.client.subscribe(function(newValue) {\n            self.isChanged = true;\n        });\n        self.items.subscribe(function(newValue) {\n            self.isChanged = true;\n        })\n\n\n\n        self.orderPackingStatus = ko.pureComputed(function() {\n            if (self.packingStatus() == '3PACKED') {\n                return 'font-green';\n            } else if (self.packingStatus() == '2NOTREADY') {\n                return 'font-yellow';\n            } else {\n                return 'font-black';\n            }\n        });\n\n        self.orderReadyStatus = ko.pureComputed(function() {\n            if (self.packingStatus() == '2NOTREADY') {\n                return 'icon-thumbsdown font-yellow';\n            } else {\n                return 'icon-thumbsup font-black';\n            }\n        });\n\n\n    };\n\n    var OrdersModel = function(orders, mySwiper) {\n\n        var swiper = mySwiper;\n\n        function init(orders) {\n\n            var observableOrders = [];\n\n            if (Array.isArray(orders) && orders.length > 0) {\n                orders.forEach(function(order) {\n\n                    observableOrders.push(new OrderModel(order));\n\n                })\n            } else {\n\n                for (var i = 0; i < 30; i++) {\n                    observableOrders.push(new OrderModel());\n\n                }\n\n            }\n\n            return observableOrders;\n        }\n\n        function sortOrders(orders) {\n\n            orders.sort(function(orderA, orderB) {\n\n                var aStatus = orderA.packingStatus();\n                var bStatus = orderB.packingStatus()\n\n                if (aStatus == bStatus) {\n\n                    return orderA.createDate <= orderB.createDate ? 1 : -1;\n\n                } else {\n                    return aStatus < bStatus ? -1 : 1;\n                }\n\n            })\n\n        }\n\n        var self = this;\n\n        self.setSwiper = function(mySwiper) {\n\n            swiper = mySwiper;\n            swiper.update();\n\n        }\n\n        var observableOrders = init(orders);\n\n        self.orders = ko.observableArray(observableOrders);\n\n\n        self.setOrders = function(orders, isInitial) {\n\n            self.orders(init(orders));\n            swiper.update();\n\n        }\n\n        self.addItem = function(data) {\n\n            data.items.unshift({\n                name: \"\",\n                quantity: 1,\n                note: '',\n                buyPrice: '',\n                sellPrice: '',\n                isDone: false\n            });\n            swiper.update();\n        };\n\n        self.removeItem = function(data, parent) {\n            parent.items.remove(data);\n            swiper.update();\n        };\n\n        self.submitOrder = function(order) {\n            arguments[3]();\n            var succeed = arguments[4];\n\n            console.log('post request....');\n\n            var orderData = ko.mapping.toJS(order); //$.parseJSON(ko.toJSON(order));\n\n            $.post('./order', orderData, function(data, status) {\n\n                    console.log('get post result');\n                    ko.mapping.fromJS(data, {}, order);\n                    succeed();\n                },\n                'json'\n            );\n\n            return false;\n\n        };\n\n        self.submitOrders = function() {\n            arguments[3]();\n            var succeed = arguments[4];\n\n\n\n            var orders = self.orders();\n            //var ordersData = ko.mapping.toJS(orders); //$.parseJSON(ko.toJSON(order));\n            var ordersData = $.parseJSON(ko.toJSON(orders))\n\n            if (Array.isArray(ordersData) && ordersData.length > 0) {\n\n                var changedIndexs = [];\n\n                var changedOrders = ordersData.filter(function(order, index) {\n\n                    var isChanged = false;\n                    var isReal = order.client == '' ? false : true;\n\n                    if (isReal) {\n                        if (order.isChanged) {\n                            isChanged = true;\n                        } else {\n                            for (var i = 0; i < order.items.length; i++) {\n                                if (order.items[i].isChanged) {\n                                    isChanged = true;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n\n                    if (isChanged) {\n                        changedIndexs.push(index);\n                    }\n\n                    return isChanged;\n\n                });\n\n                if (changedOrders.length > 0) {\n\n                    $.post('./orders', { orders: changedOrders }, function(rs, status) {\n\n\n                            rs.forEach(function(newOrder, index) {\n                                var orderIndex = changedIndexs[index];\n\n                                if ($.isArray(newOrder.items) && newOrder.items.length == 0) {\n                                    newOrder.items = [{}, {}, {}];\n                                }\n\n                                ko.mapping.fromJS(newOrder, {\n                                    items: {\n                                        create: function(option) {\n                                            return new Item(option.data);\n\n                                        }\n                                    }\n                                }, orders[orderIndex]);\n\n                                orders[orderIndex].isChanged = false;\n\n\n\n\n                            })\n\n                            succeed();\n                        },\n                        'json'\n                    );\n                } else {\n                    succeed();\n                }\n            }\n\n\n\n\n\n            return false;\n\n        };\n\n\n\n        self.markPackingStatus = function(order) {\n            arguments[3]();\n            var succeed = arguments[4];\n            var parent = arguments[1];\n            var id = order._id();\n\n            var packingStatus = order.packingStatus()\n\n            var $target = $(arguments[2].target);\n\n            var newStatus = '';\n\n            if ($target.hasClass('icon-leaf')) {\n                if (packingStatus == \"1ISREADY\") {\n                    newStatus = '3PACKED';\n                } else if (packingStatus == \"3PACKED\") {\n                    newStatus = '1ISREADY';\n                }\n            } else {\n                if (packingStatus == \"1ISREADY\" || packingStatus == \"3PACKED\") {\n                    newStatus = '2NOTREADY';\n                } else {\n                    newStatus = '1ISREADY';\n                }\n            }\n\n\n            if (newStatus == \"\") {\n                succeed();\n                return;\n            }\n\n            $.ajax('./packingStatus/' + id, {\n                success: function(data, status) {\n\n                    order.packingStatus(newStatus)\n\n                    if ($('#search-receivedOrders').val() == '') {\n\n                        var orders = self.orders();\n\n                        sortOrders(orders);\n\n                        self.orders(orders);\n\n                    }\n\n                    succeed();\n\n                },\n                data: {\n                    'packingStatus': newStatus\n                },\n                dataType: 'json',\n                type: 'PUT'\n\n            });\n\n        };\n\n        self.addOrder = function() {\n\n            var order = new OrderModel();\n\n            self.orders.unshift(order);\n            swiper.update();\n            $(window).scrollTop(0);\n        };\n\n        self.removeOrder = function(order) {\n\n            arguments[3]();\n            var succeed = arguments[4];\n\n            var id = order._id();\n            self.orders.remove(order);\n\n\n            if (id == '') {\n                succeed();\n\n                return;\n            }\n\n            $.ajax('./order/' + id, {\n                success: function(data, status) {\n\n                    succeed();\n\n                },\n                dataType: 'json',\n                type: 'DELETE'\n\n            });\n            swiper.update();\n\n\n        };\n\n        var orders = null;\n        self.searchOrders = function(data, event) {\n\n            var keywords = $(event.target).val();\n            if (orders == null) {\n                orders = self.orders();\n            }\n\n\n            if (keywords == '') {\n\n                sortOrders(orders);\n\n                var searchedOrders = orders;\n\n            } else {\n                var searchedOrders = orders.filter(function(order) {\n\n                    return order.client().indexOf(keywords) >= 0;\n                });\n            }\n\n\n            self.orders(searchedOrders);\n\n\n            setTimeout(function() {\n                swiper.update();\n            }, 100)\n\n\n        };\n\n    };\n\n\n\n    return OrdersModel;\n\n\n\n})\n"]}