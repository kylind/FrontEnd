{"version":3,"sources":["public/js/reckoning-orders.js"],"names":["define","$","ko","mapping","item","self","this","name","observable","quantity","buyPrice","isNaN","sellPrice","profit","note","isDone","isHistoricTradesOpen","isChanged","subscribe","newValue","newVal","OrderModel","_id","order","client","postage","observableItems","items","isArray","length","push","Item","i","formatPrice","price","createDate","displayDate","rate","purePrice","toFixed","isComplete","parseFloat","total","pureComputed","status","packingStatus","orderStatus","arguments","getJSON","event","succeed","$historicTrades","target","closest","find","slideUp","addAddress","swiper","update","itemName","itemData","res","historicTrades","slideDown","unshift","address","getAddresses","removeItem","remove","addresses","removedAddresses","removeAddress","addressesData","parent","newStatus","success","data","dataType","post","markDone","submitOrder","orderData","parseJSON","forEach","ajax","id","observableOrders","type","toJSON","$orders","addClass","removeClass","submitOrders","log","fromJS","ordersData","OrdersModel","orders","searchCurrentOrders","keywords","searchedOrders","filter","indexOf","setTimeout","searchGlobalOrders","newKeywords","timeoutIds","clearTimeout","getObservableOrders","console","observableArray","orderIndex","toggleClientView","newOrder","toggleClass","hasClass","Array","changedIndexs","changedOrders","index","scrollTop","existingOrder","doneOrder","rs","newOrders","create","option","addOrder","regex","matchedRes","window","addExistingOrder","ele","removeDoneOrder","searchOrders","val","match"],"mappings":"YAAAA,SAAQ,SAAU,WAAY,oBAAqB,SAASC,EAAGC,EAAIC,GAAnEH,EAAOG,QAAAA,CAEHD,IAAGC,GAAH,SAAAC,GAGI,GAAIC,GAAOC,IAGXD,GAAKE,KAAOL,EAAGM,WAAWJ,GAAQA,EAAKG,KAAOH,EAAKG,KAAO,IAA1DF,EAAKE,SAAUC,EAAAA,WAAWJ,GAAQA,EAARK,SAAyBF,EAAOE,SAA1D,KACAJ,EAAKI,SAAWP,EAAGM,WAAWJ,IAAQA,MAAKK,EAAAA,UAAgBA,EAA7BC,SAA9B,IACAL,EAAKK,UAAWR,EAAGM,WAAWJ,IAASO,MAAMP,EAAKM,WAAYN,EAAKM,UAAnE,IACAL,EAAKO,OAALR,GAAoBI,EAAAA,OAAWJ,EAASO,OAAMP,GAC9CC,EAAKQ,KAALT,GAAcA,EAAQA,KAAKS,EAAST,KAAKS,GACzCR,EAAKS,UAAOV,IAAQA,EAAKU,SAAOV,EAApBW,OACZV,EAAKU,eAAiBX,EAAAA,oBAGtBC,EAAKW,sBAAuB,EAE5BX,EAAKY,WAAY,EAEjBZ,EAAKE,KAAKW,UAAU,SAASC,GAA7Bd,EAAAY,WAAoB,IAEnBZ,EAFDI,SAAAS,UAAA,SAAAC,GAGAd,EAAKI,WAASS,IAEbb,EAFDK,SAAAQ,UAAA,SAAAE,GAGAf,EAAKK,WAASQ,IAEbb,EAFDO,UAAAM,UAAA,SAAAE,GAGAf,EAAKO,WAAUM,KAMfG,EAAa,SAAbA,EAAAA,GACA,GAAIhB,GAAOC,IAEXD,GAAKiB,IAAMpB,EAAGM,WAAWe,EAAQA,EAAMD,IAAM,IAC7CjB,EAAKmB,OAAStB,EAAGM,WAAWe,EAAQA,EAAMC,OAAS,IACnDnB,EAAKoB,QAAUvB,EAAGM,WAAWe,GAASA,EAAME,QAAUF,EAAME,QAAU,EAGtE,IAAIC,KAGAH,IAAAA,GAAMI,EAANC,QAAAL,EAAoBI,QAAAJ,EAAeI,MAAAE,OAAA,EAC/BH,EAAAA,MAAAA,QAAgBI,SAASC,GAD7BL,EAAAI,KAAA,GAAAC,GAAA3B,UAOC,KAAA,GAAA4B,GAAA,EAAAA,EAAA,EAAAA,IAEJN,EAAAI,KAAA,GAAAC,GAED1B,GAAKY,WAAY,EAKbZ,EAAAA,MAAKY,EAAAA,gBAALS,GAIJrB,EAAKmB,MAALN,UAAA,SAAsBC,GAJlBd,EAAKY,WAAY,IAUjBZ,EAAAA,OAAKY,UAAY,SAAjBE,GAJAd,EAAKY,WAAY,IAGrBZ,EAAKoB,QAAQP,UAAU,SAASC,GAchCd,EAAAY,WAAoBM,IAOpBlB,EAAK4B,WAAL/B,EAAmBM,WAAS0B,EAAOX,EAAAY,WAAA,IAZnC9B,EAAK+B,YAAclC,EAAGM,WAAWe,EAAQA,EAAMa,YAAc,IAkBrD/B,EAAAgC,KAAAd,EAASe,EAAFD,KAAaE,GAEpBlC,EAAAK,SAAOR,EAAPM,WAAAe,GAAAA,EAAAb,SAAAa,EAAAb,SAAA,IACHL,EAAAO,UAAAV,EAAAM,WAAAe,GAAAA,EAAAX,UAAAW,EAAAX,UAAA,IACJP,EAVDQ,OAAAX,EAAAM,WAAAe,GAAAA,EAAAV,OAAAU,EAAAV,OAAA,IAFAR,EAAKmC,WAAatC,EAAGM,cAAWe,IAASA,EAAMiB,aAAajB,EAAMiB,YAgB9DnC,EAAA4B,YAAIrB,SAAY6B,GAEhB,IAAI9B,EAAMC,MAAN,GAEH,IAFD0B,GAEOJ,GACH,OAAAI,KACHA,GAAAC,QAAA,GAZU,KAgBMlC,EAArBqC,MAAAxC,EAAAyC,aAAA,WAVI,GAAI/B,GAAY6B,WAAWnC,KAAKM,aAiBpCa,EAAAgB,WAAAnC,KAAAmB,UAfI,OAAId,OAAMC,IAAcD,MAAMc,GACnB,KAECb,EAAYa,GAASc,QAAQ,IAE1ClC,EAkBHA,GAAKuC,OAAS1C,EAAGM,WAAWe,EAAQA,EAAMqB,OAAS,aAEnDvC,EAAKwC,cAAgBtB,EAAQA,EAAMsB,cAAgB,WAEnDxC,EAAKyC,YAAc5C,EAAGyC,aAAa,WAoB3BI,MAAA,SAAAA,EAAAA,SAlBO,aAoBG,SAARC,EAAQJ,SAlBH,cAkBLI,SAMM5C,EAAAA,kBAAKY,SAAAA,EAAAA,EAALiC,GAEAC,GAAAA,GAAAA,EAAAA,QAAAA,KAAAA,GAEHC,EALDlD,EAAAgD,EAAAG,QAAAC,QAAA,SAAAC,KAAA,eASP,IAtBDlD,EAsBOY,qBAEHmC,EAAgBI,QAAQ,OAAQ,WA0BnCC,EAALxC,sBAAoC,EAxBxByC,EAAOC,eAJR,CAEHP,GAAAA,GAAAA,UAAwB,EAEpBM,IAAA,IAAAA,EAAOC,KAAP,MAEPX,WAAA,KApBG9C,EAAE+C,QAAQ,oBAAsBW,SAAYC,EAASrD,MAAQ,SAASsD,EAAKjB,GAE7D,WAAVA,EAAsBxC,EAAK0D,eAAeD,GAAOzD,EAAK0D,mBAGtDX,EAAgBY,UAAU,OAAQ,WAwB/B3D,EAAAY,sBAAW,EAEXgD,IACJN,EAAPA,eAgBIO,EAAAA,kBAJmB,SAAA7D,GAAA,MAAvBA,GAAA0D,iBAAAjC,OAAA,GAWJxB,EAAK6D,QAAAA,WAED7D,EAAI6C,MAAAA,QAAUH,GAAAA,IAzBdU,EAAOC,UA6BPrD,EAAA8D,WAAc,SAAI/D,GAzBlBC,EAAKsB,MAAMyC,OAAOhE,GA2BlBH,EAAE+C,UAKES,EAAAA,WAAOC,SAAPO,GAGH5D,EARDgE,UAAAL,SARJ1C,IAAA,GATQE,OAAQnB,EAAKmB,SA8BjB8C,UAAAA,GA5BIL,QAAS,GA8BZM,MAAAA,KAEDd,EAAIQ,UAzBR5D,EAAK6D,aAAe,SAAS3C,GA+BzBlB,UAAKgE,IACLZ,IAAAA,GAAAV,UAAA,GA5BIvB,EAASD,EAAMC,QAkCnB,KAAAuB,GA9BA9C,EAAE+C,QAAQ,uBAiCNwB,OAAAA,GA/BD,SAASX,EAAKjB,GAmCCrB,WAAVqB,EADcrB,EAAA8C,UAAAR,GAAAtC,EAAA8C,cAEdZ,EAAAC,SACDR,MASP,IAAAoB,KAjCJjE,GAAKkE,cAAgB,SAASN,GAsC1B,IAAAlB,EAAAzB,KAEImD,EAAS1B,KAAbkB,EAAA3C,KAhCAjB,EAAKgE,UAAUD,OAAOH,GAqCtBR,EAAIiB,UAMAA,EAAAA,gBAAY,SAAZnD,GAEHwB,UAAA,IArCD,IAAIG,GAAUH,UAAU,GAwCpB4B,EAASzE,EAAAC,QAASyE,KAAMhC,EAAfyB,UAgBTQ,OAbhB5E,GAAA6E,KAAA,eArCoBtD,OAAUD,EAAMC,OAChB6C,UAAaG,GACd,SAASH,EAAWzB,GAEnBrB,EAAM8C,UAAUA,GAuChBnB,EAAAA,SACAA,KAGJ0B,SAGAC,GAKPxE,EAxCD0E,SAAA,WACIhC,UAAU,IAyCd1C,IAAK2E,GAALjC,UAAmB,GAEXG,GADJH,UAAA,GACIG,EAAUH,OAEVkC,EAAcC,EAAAA,SAEhBJ,EAAF,WAEmBK,cAAXP,EAvCJF,EAAY,QAuCR,SAAA5B,IApCJ4B,EAAY,SAIhBzE,EAAEmF,KAAK,iBAAmBC,GA8C1BV,QAAA,SAAAC,EAAAhC,GA7SRvC,EAAAuC,OAAA8B,GA6TYY,KAIAA,MAFJ1C,OAAA8B,GAHJG,SAAA,OA3CQU,KAAM,SAMdlF,EAAK2E,YAAc,SAASzD,GAuDxBtB,UAAQmD,IArDR,IAEI6B,IAFUlC,UAAU,GAER9C,EAAEiF,UAAUhF,EAAGsF,OAAOjE,IAkBtC,OAuCIkE,GAAAA,KAAAA,UAAQC,EAAS,SAAjBd,EAAAhC,GAGA6C,EAAQE,MAAAA,QAAY,SAAAvF,GAtDZA,EAAK0D,oBAgEhB8B,QAAeC,IAAA,mBAChB9C,EAAA5C,QAAA2F,OAAAlB,KAAArD,IAIIwE,SAzDG,IAqEEC,EAFD,SAEOC,EAAAxC,GA+KnB,QAASyC,GAAoBC,GAGzB,GAAIC,GAAiBH,EAAOI,OAAO,SAAS9E,GAExC,MAAOA,GAAMC,SAAS8E,QAAQH,IAAa,GAG/C9F,GAAK4F,OAAOG,GACZG,WAAW,WACP9C,EAAOC,UACR,KAOP,QAAS8C,GAAmBL,GAExBM,EAAcN,CAEd,IAAId,GAAKkB,WAAW,WAGhB,IAAK,GAAIvE,GAAI,EAAGA,EAAI0E,EAAW7E,OAAQG,IACnC2E,aAAaD,EAAW1E,GAG5B0E,MAEmB,IAAfD,GAEAxG,EAAEmF,KAAK,kBACHR,MACIpD,OAAQiF,GAEZlB,KAAM,MACNZ,QAAS,SAASC,EAAMhC,GAEpBvC,EAAK4F,OAAO5F,EAAKuG,oBAAoBhC,IACrC2B,WAAW,WACP9C,EAAOC,UACR,MAIPmB,SAAU,SAQlBgC,QAAQhB,IAAI,kBAAoBY,IAEjC,IAEHC,GAAW5E,KAAKuD,GAvOIpE,GAAAA,GAAAA,IAGPZ,GAAAuG,oBAAA,SAAAX,GACJ,GAAAX,KAQJ,OANGW,GAAAd,QAAIlE,SAAWM,GAEd+D,EAAAxD,KAAA,GAAAT,GAAAE,EAAAkC,MAjBL6B,EApCR,IAAIA,GAAmBjF,EAAKuG,oBAAoBX,EA+DxB5F,GAAA4F,OAAA/F,EAAA4G,gBAAIC,GAEJ1G,EAAA2G,iBAAG/G,SAAA2E,EAAUqC,EAAStF,GAErB1B,EAAAgD,EAAAG,QAAA8D,YAAA,gBAGG9G,IAAAA,GAAAA,EAAAA,qBA3DpBH,GAAEgD,EAAMG,QAAQ+D,SAAS,iBA8DTjH,EAAAA,SAAGC,gBAGSsF,EAAAE,YAAA,gBAHgBlC,EAAAC,UAe/BrD,EAAAuF,aA1BD,WApChB7C,UAAU,IAgEMG,IAAAA,GAAAA,UAAAA,GAKX+C,EAAM5F,EAAA4F,SACH/C,EAAAA,EAAAA,UAAAA,EAAAA,OAAAA,GAIP,IAAAkE,MAAAxF,QAAAmE,IAAAA,EAAAlE,OAAA,EAAA,CAGD,GAAOwF,MAnECC,EAAgBvB,EAAWM,OAAO,SAAS9E,EAAOgG,GAElD,GAAItG,IAAY,CAEhB,IAAIM,EAAMN,UAuEN+C,GAAQzC,MAEViG,KAAAA,GAAVxF,GAAA,EAAAA,EAAAT,EAAAI,MAAAE,OAAAG,IANJ,GAAAT,EAAAI,MAAAK,GAAAf,UAAA,CAQwBA,GAASM,CACT,OAUnB,MA3EWN,IAuEHwG,EAAe3F,KAAAyF,GAIvBtG,GAnEOqG,GAAczF,OAAS,EAyE3BwD,EAAKqC,KAAAA,WAATzB,OAAAqB,GAAA,SAAAK,EAAA/E,GAEc+E,EAAdxC,QAAoB,SAAA8B,EAAAM,GAvEA,GAAIR,GAAaM,EAAcE,EAE5BtH,GAAE2B,QAAQqF,EAAStF,QAAiC,GAAvBsF,EAAStF,MAAME,SAyEpDoF,EAAPtF,kBAIKiG,EAATjG,MAAAwD,QAAA,SAAA/E,GAEHA,EAAA0D,oBAdL5D,EAAAC,QAAA2F,OAAAmB,GAoBmBtF,OA3EakG,OAAQ,SAASC,GA6E7C,MAAA,IAAA/F,GAAA+F,EAAAlD,SAImBrD,EAAnBwF,IAEcd,EAAAc,GAAA9F,WAAA,IAUDiC,KADW,QAvEhBA,IAyFR,OAAI+C,GAIJ5F,EAAA0H,SAAI5B,WAEJ,GAAI6B,GAAQ,GAAA3G,GAAA,KAAAoC,EAGZpD,GAAI4H,OAAAA,QAAa9B,GAlFjB1C,EAAOC,SAoFPzD,EAAAiI,QAAID,UAAc,IAEd5H,EAAA8H,iBAAI,SAAqB5G,GACrB2E,GAAAA,MAAAA,EAAAA,CAGAM,GAAAA,GAAAA,EAAmByB,KAAAA,SAAnBG,GACH,MAAAA,GAAA9G,KAAAC,EAAAD,KAIDmF,IApFIR,EAAOjC,QAAQzC,KAO3BlB,EAAKgI,gBAAkB,SAASX,GAE5B,GAAIrC,GAAKqC,EAAUpG,KAEnB,IAAc,MAAV2E,EAAgB,CAsFpB,GAAA2B,GAAA3B,EAAAI,OAAA,SAAA9E,GAKK0E,MAAOG,GAAAA,OAAZf,GAIHY,GAAA2B,EAIGnB,EAAAA,OAAAA,OAAJiB,IAIIjB,EAAAA,YAAcN,SAAd5E,GAEAwB,UAASwD,IAtFT,IAAIrD,GAAUH,UAAU,GA0FhB4D,EAAAA,EAAAA,KAGJD,OAFCrG,GAAA4F,OAAA7B,OAAA7C,GAEDmF,IAAAA,GAEAxD,QAvFAO,GAAOC,WA8FCiB,EAAAA,KAAAA,WAAAA,GAvFRA,QAAS,SAASC,EAAMhC,GA0FZ2D,KAIH1B,SAZoB,OA5E7BU,KAAM,eA4EuB9B,GAAAC,UA0BjCgD,IAAAA,GAAAA,IAGHrG,GAAAiI,aAAA,SAAA1D,EAAA3B,GAzSL,MAAAgD,IA4MYA,EAAS5F,EAAK4F,SAGlB,IAAIE,GAAWlG,EAAEgD,EAAMG,QAAQmF,MAE3BP,EAAQ,yEAGRC,EAAa9B,EAASqC,MAAMR,EAEd,OAAdC,EAEqB,IAAjBA,EAAW,GACX/B,EAAoB+B,EAAW,IAG/BzB,EAAmByB,EAAW,IAGjB,MAAVhC,IAEPQ,EAAc,GAEdpG,EAAK4F,OAAOA,GACZM,WAAW,WACP9C,EAAOC,UACR,MAmBX,IAAIgD,MAEAD,EAAc,GAmDtB,OAAOT","file":"reckoning-orders.js","sourcesContent":["define(['jquery', 'knockout', 'knockout.mapping'], function($, ko, mapping) {\n\n    ko.mapping = mapping;\n\n    var Item = function(item) {\n        var self = this;\n\n\n        self.name = ko.observable(item && item.name ? item.name : '');\n        self.quantity = ko.observable(item && item.quantity ? item.quantity : '1');\n        self.buyPrice = ko.observable(item && !isNaN(item.buyPrice) ? item.buyPrice : '');\n        self.sellPrice = ko.observable(item && !isNaN(item.sellPrice) ? item.sellPrice : '');\n        self.profit = item && item.profit ? item.profit : '';\n        self.note = item && item.note ? item.note : '';\n        self.isDone = item && item.isDone ? item.isDone : false;\n        self.historicTrades = ko.observableArray([]);\n\n        self.isHistoricTradesOpen = false;\n\n        self.isChanged = false;\n\n        self.name.subscribe(function(newValue) {\n            self.isChanged = true;\n        })\n        self.quantity.subscribe(function(newValue) {\n            self.isChanged = true;\n        })\n        self.buyPrice.subscribe(function(newVal) {\n            self.isChanged = true;\n        })\n        self.sellPrice.subscribe(function(newVal) {\n            self.isChanged = true;\n        })\n\n    }\n\n    var OrderModel = function(order, swiper) {\n        var self = this;\n\n        self._id = ko.observable(order ? order._id : '');\n        self.client = ko.observable(order ? order.client : '');\n        self.postage = ko.observable(order && order.postage ? order.postage : 0);\n\n\n        var observableItems = [];\n\n        if (order && $.isArray(order.items) && order.items.length > 0) {\n            order.items.forEach(function(item) {\n                observableItems.push(new Item(item));\n            });\n\n        } else {\n            for (var i = 0; i < 3; i++) {\n                observableItems.push(new Item());\n            }\n\n        }\n\n        self.isChanged = false;\n\n        self.items = ko.observableArray(observableItems);\n\n        self.items.subscribe(function(newValue) {\n            self.isChanged = true;\n\n\n        })\n        self.client.subscribe(function(newValue) {\n\n            self.isChanged = true;\n\n        })\n        self.postage.subscribe(function(newValue) {\n            self.isChanged = true;\n\n\n        })\n\n\n\n        self.createDate = ko.observable(order ? order.createDate : '');\n        self.displayDate = ko.observable(order ? order.displayDate : '');\n\n\n\n\n        self.rate = order ? order.rate : '';\n\n        self.buyPrice = ko.observable(order && order.buyPrice ? order.buyPrice : '');\n        self.sellPrice = ko.observable(order && order.sellPrice ? order.sellPrice : '');\n        self.profit = ko.observable(order && order.profit ? order.profit : '');\n        self.isComplete = ko.observable(order && order.isComplete ? order.isComplete : false);\n\n        self.formatPrice = function(price) {\n\n            if (!price) return '?';\n\n            var purePrice = price();\n            if (purePrice) {\n                return (+purePrice).toFixed(1);\n            } else {\n                return '?'\n            }\n        }\n\n\n        self.total = ko.pureComputed(function() {\n            var sellPrice = parseFloat(this.sellPrice());\n            var postage = parseFloat(this.postage());\n            if (isNaN(sellPrice) || isNaN(postage)) {\n                return '?';\n            } else {\n                return (sellPrice + postage).toFixed(1);\n            }\n        }, self);\n\n\n        var dateFormatting = {\n            month: \"2-digit\",\n            day: \"numeric\",\n            weekday: \"short\"\n        };\n\n\n        /*self.displayDate = function() {\n\n            var createDate = self.createDate()\n\n            return createDate ? new Date(createDate).toLocaleDateString(\"en-US\", dateFormatting) : '';\n\n        };*/\n\n        self.status = ko.observable(order ? order.status : '1RECEIVED');\n\n        self.packingStatus = order ? order.packingStatus : '1ISREADY';\n\n        self.orderStatus = ko.pureComputed(function() {\n            if (self.status() == '3DONE') {\n                return 'font-green';\n            } else if (self.status() == '2SENT') {\n                return 'font-yellow';\n            }\n        });\n\n        self.getHistoricTrades = function(item, parent, event) {\n\n            var itemData = ko.mapping.toJS(item);\n\n            var $historicTrades = $(event.target).closest('.item').find('.historicbox');\n\n            if (!item.isHistoricTradesOpen) {\n\n                var succeed = arguments[4]\n\n                if (itemData.name == '') return;\n\n                arguments[3]();\n\n                $.getJSON('./historictrades', { 'itemName': itemData.name }, function(res, status) {\n\n                    status == 'success' ? item.historicTrades(res) : item.historicTrades([]);\n\n\n                    $historicTrades.slideDown('fast', function() {\n                        item.isHistoricTradesOpen = true;\n\n                        succeed();\n                        swiper.update();\n                    });\n\n                });\n\n            } else {\n\n                $historicTrades.slideUp('fast', function() {\n                    item.isHistoricTradesOpen = false;\n                    swiper.update();\n                });\n            }\n        };\n\n        self.hasHistoricTrades = function(item) {\n\n            return item.historicTrades().length > 0 ? true : false;\n\n        };\n\n        self.addItem = function() {\n\n            self.items.unshift(new Item());\n            swiper.update();\n        };\n\n        self.removeItem = function(item) {\n            self.items.remove(item);\n            swiper.update();\n        };\n\n\n\n        self.addAddress = function(address) {\n\n            self.addresses.unshift({\n                _id: \"\",\n                client: self.client(),\n                recipient: \"\",\n                address: \"\",\n                phone: \"\"\n            });\n            swiper.update();\n\n        };\n\n        self.getAddresses = function(order) {\n            arguments[3]();\n            var succeed = arguments[4];\n\n            var client = order.client();\n\n            if (client == '') return;\n\n            $.getJSON('./addressesByClient', {\n                client: client\n            }, function(res, status) {\n\n                status == 'success' ? order.addresses(res) : order.addresses([]);\n                swiper.update();\n                succeed();\n\n            });\n\n\n        };\n\n        var removedAddresses = [];\n\n        self.removeAddress = function(address) {\n\n            if (address._id != '') {\n\n                removedAddresses.push(address._id);\n\n            }\n\n            self.addresses.remove(address);\n            swiper.update();\n\n\n        };\n\n        self.submitAddresses = function(order) {\n            arguments[3]();\n            var succeed = arguments[4];\n\n            var addressesData = ko.mapping.toJS(order.addresses);\n\n\n            $.post('./addresses', {\n                    \"client\": order.client,\n                    \"addresses\": addressesData\n                }, function(addresses, status) {\n\n                    order.addresses(addresses);\n                    swiper.update();\n                    succeed();\n                },\n                'json'\n            );\n\n            return false;\n\n        };\n\n        self.markDone = function() {\n            arguments[3]();\n            var succeed = arguments[4];\n            var parent = arguments[1];\n            var id = self._id();\n\n            var orderStatus = self.status();\n\n            var newStatus = '1RECEIVED';\n\n            if (orderStatus == '1RECEIVED') {\n                newStatus = '2SENT'\n\n            } else if (orderStatus == '2SENT') {\n                newStatus = '3DONE'\n\n            }\n\n            $.ajax('./orderStatus/' + id, {\n                success: function(data, status) {\n\n                    self.status(newStatus)\n/*                    if (newStatus == '3DONE') {\n                        //parent.removeDoneOrder(self)\n                    } else if (orderStatus == '3DONE') {\n                        parent.addExistingOrder(self)\n\n                    }*/\n                    succeed();\n                    //swiper.update();\n\n                },\n                data: {\n                    'status': newStatus\n                },\n                dataType: 'json',\n                type: 'PUT'\n\n            });\n\n        }\n\n        self.submitOrder = function(order) {\n            arguments[3]();\n            var succeed = arguments[4];\n\n            var orderData = $.parseJSON(ko.toJSON(order));\n\n            $.post('./order', orderData, function(data, status) {\n\n                    data.items.forEach(function(item) {\n\n                        item.historicTrades = [];\n\n                    });\n\n                    console.log('get post result');\n                    ko.mapping.fromJS(data, {}, order);\n\n\n                },\n                'json'\n            );\n\n            return false;\n\n        };\n\n\n    };\n\n\n\n    var OrdersModel = function(orders, swiper) {\n\n\n        var self = this;\n\n\n        self.getObservableOrders = function(orders) {\n            var observableOrders = [];\n\n            orders.forEach(function(order) {\n\n                observableOrders.push(new OrderModel(order, swiper));\n\n            })\n            return observableOrders;\n\n        };\n\n        var observableOrders = self.getObservableOrders(orders);\n\n        self.orders = ko.observableArray(observableOrders);\n\n        self.toggleClientView = function(data, parent, event) {\n\n            $(event.target).toggleClass('icon-eyeslash');\n\n\n            var $orders = $('.orders--reckoning');\n\n            if ($(event.target).hasClass('icon-eyeslash')) {\n                $orders.addClass(\"isClientView\");\n\n            } else {\n                $orders.removeClass(\"isClientView\");\n            }\n\n            swiper.update();\n\n\n        };\n\n\n\n        self.submitOrders = function() {\n            arguments[3]();\n            var succeed = arguments[4];\n\n            var orders = self.orders();\n            var ordersData = $.parseJSON(ko.toJSON(orders)); //$.parseJSON(ko.toJSON(order));\n\n            if (Array.isArray(ordersData) && ordersData.length > 0) {\n\n                var changedIndexs = [];\n\n                var changedOrders = ordersData.filter(function(order, index) {\n\n                    var isChanged = false;\n\n                    if (order.isChanged) {\n                        isChanged = true;\n                    } else {\n                        for (var i = 0; i < order.items.length; i++) {\n                            if (order.items[i].isChanged) {\n                                isChanged = true;\n                                break;\n                            }\n                        }\n                    }\n\n                    if (isChanged) {\n                        changedIndexs.push(index);\n                    }\n\n                    return isChanged;\n\n                })\n\n                if (changedOrders.length > 0) {\n                    $.post('/orders', { orders: changedOrders }, function(rs, status) {\n\n                            rs.forEach(function(newOrder, index) {\n                                var orderIndex = changedIndexs[index];\n\n                                if($.isArray(newOrder.items) && newOrder.items.length==0){\n                                    newOrder.items=[{},{},{}];\n                                }\n\n                                newOrder.items.forEach(function(item) {\n                                    item.historicTrades = [];\n                                });\n\n                                ko.mapping.fromJS(newOrder, {\n                                    items: {\n                                        create: function(option) {\n                                            return new Item(option.data);\n\n                                        }\n                                    }\n                                }, orders[orderIndex]);\n\n                                orders[orderIndex].isChanged=false;\n                                // orders[orderIndex].items().forEach(function(item){\n                                //     item.isChanged=false;\n\n                                // })\n\n                            })\n\n                            succeed();\n\n                        },\n                        'json'\n                    );\n                } else {\n                    succeed();\n                }\n\n\n            }\n\n\n            return false;\n\n        };\n\n        self.addOrder = function() {\n\n            var order = new OrderModel(null, swiper);\n\n            self.orders.unshift(order);\n            swiper.update();\n            $(window).scrollTop(0);\n        };\n        self.addExistingOrder = function(order) {\n            if (orders != null) {\n\n                var existingOrder = orders.find(function(ele) {\n                    return ele._id == order._id;\n                });\n\n                if (!existingOrder) {\n                    orders.unshift(order);\n                }\n\n            }\n            //self.orders.push(order);\n\n        };\n        self.removeDoneOrder = function(doneOrder) {\n\n            var id = doneOrder._id();\n\n            if (orders != null) {\n\n                var newOrders = orders.filter(function(order) {\n\n                    return order._id() != id;\n\n                });\n\n                orders = newOrders;\n\n            }\n\n            self.orders.remove(doneOrder);\n\n\n        };\n        self.removeOrder = function(order) {\n\n            arguments[3]();\n            var succeed = arguments[4];\n\n            var id = order._id();\n            self.orders.remove(order);\n\n            if (id == '') {\n\n                succeed();\n                swiper.update();\n                return;\n            }\n\n\n\n            $.ajax('./order/' + id, {\n                success: function(data, status) {\n\n                    succeed();\n\n                },\n                dataType: 'json',\n                type: 'DELETE'\n\n            });\n            swiper.update();\n\n        };\n\n\n\n        var orders = null;\n        self.searchOrders = function(data, event) {\n            if (orders == null) {\n                orders = self.orders();\n            }\n\n            var keywords = $(event.target).val();\n\n            var regex = /(\\s*)([\\u4E00-\\u9FA5\\uF900-\\uFA2D\\w]+[\\u4E00-\\u9FA5\\uF900-\\uFA2D\\w ]*)/;\n\n\n            var matchedRes = keywords.match(regex);\n\n            if (matchedRes != null) {\n\n                if (matchedRes[1] == \"\") {\n                    searchCurrentOrders(matchedRes[2])\n\n                } else {\n                    searchGlobalOrders(matchedRes[2])\n                }\n\n            } else if (orders != null) {\n\n                newKeywords = '';\n\n                self.orders(orders);\n                setTimeout(function() {\n                    swiper.update();\n                }, 100)\n            }\n\n        }\n\n        function searchCurrentOrders(keywords) {\n\n\n            var searchedOrders = orders.filter(function(order) {\n\n                return order.client().indexOf(keywords) >= 0;\n            });\n\n            self.orders(searchedOrders);\n            setTimeout(function() {\n                swiper.update();\n            }, 100)\n        }\n\n        var timeoutIds = [];\n\n        var newKeywords = '';\n\n        function searchGlobalOrders(keywords) {\n\n            newKeywords = keywords;\n\n            var id = setTimeout(function() {\n\n\n                for (var i = 1; i < timeoutIds.length; i++) {\n                    clearTimeout(timeoutIds[i]);\n                }\n\n                timeoutIds = [];\n\n                if (newKeywords != '') {\n\n                    $.ajax('./ordersByName', {\n                        data: {\n                            client: newKeywords\n                        },\n                        type: 'GET',\n                        success: function(data, status) {\n\n                            self.orders(self.getObservableOrders(data));\n                            setTimeout(function() {\n                                swiper.update();\n                            }, 100);\n\n                        },\n\n                        dataType: 'json'\n\n                    });\n\n\n\n                }\n\n                console.log('i am searching ' + newKeywords);\n\n            }, 1000);\n\n            timeoutIds.push(id);\n\n\n        }\n\n\n    };\n\n    return OrdersModel;\n\n\n})\n"]}