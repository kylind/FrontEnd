{"version":3,"sources":["public/js/reckoning-orders.js"],"names":["define","$","ko","mapping","getDoneOrderStartDate","currentMiliSeconds","Date","now","currentDay","getDay","startMiliSeconds","startDate","setHours","Item","item","this","self","name","observable","quantity","buyPrice","isNaN","sellPrice","profit","note","isDone","historicTrades","observableArray","isHistoricTradesOpen","isChanged","subscribe","newValue","newVal","OrderModel","order","swiper","client","postage","observableItems","items","length","forEach","push","i","createDate","rate","displayDate","purePrice","toFixed","isComplete","formatPrice","parseFloat","price","total","pureComputed","status","packingStatus","orderStatus","arguments","getJSON","getHistoricTrades","parent","event","succeed","$historicTrades","slideUp","addAddress","update","itemName","itemData","hasHistoricTrades","res","slideDown","address","getAddresses","removeItem","remove","addresses","unshift","_id","removedAddresses","recipient","removeAddress","phone","submitAddresses","addressesData","post","data","console","toJS","OrdersModel","updateReservedOrders","reservedOrders","sortOrders","submitOrder","bStatus","orderB","orderData","aStatus","orderA","log","fromJS","orders","hasClass","searchCurrentOrders","keywords","searchedOrders","filter","indexOf","setTimeout","searchGlobalOrders","newKeywords","id","timeoutIds","clearTimeout","ajax","type","success","getObservableOrders","dataType","$orders","newStatus","observableOrders","removeDoneOrder","toggleClientView","target","toggleClass","addClass","removeClass","markDone","ordersData","isArray","changedIndexs","val","newOrder","needRefresh","submitOrders","parseJSON","toJSON","Array","changedOrders","index","scrollTop","rs","orderIndex","doneOrder","option","addOrder","regex","matchedRes","window","addExistingOrder","removeOrder","match"],"mappings":"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","file":"reckoning-orders.js","sourcesContent":["define(['jquery', 'knockout', 'knockout.mapping'], function($, ko, mapping) {\n\n    ko.mapping = mapping;\n\n\n    function getDoneOrderStartDate() {\n\n        var currentMiliSeconds = Date.now();\n\n        var currentDay = new Date().getDay();\n\n        var startMiliSeconds = currentMiliSeconds - ((currentDay + 7) * 24 * 60 * 60 * 1000);\n\n        var startDate = new Date(new Date(startMiliSeconds).setHours(0, 0, 0, 0));\n\n        return startDate;\n    }\n\n    var Item = function(item) {\n        var self = this;\n\n\n        self.name = ko.observable(item && item.name ? item.name : '');\n        self.quantity = ko.observable(item && item.quantity ? item.quantity : '1');\n        self.buyPrice = ko.observable(item && !isNaN(item.buyPrice) ? item.buyPrice : '');\n        self.sellPrice = ko.observable(item && !isNaN(item.sellPrice) ? item.sellPrice : '');\n        self.profit = item && item.profit ? item.profit : '';\n        self.note = item && item.note ? item.note : '';\n        self.isDone = item && item.isDone ? item.isDone : false;\n        self.historicTrades = ko.observableArray([]);\n\n        self.isHistoricTradesOpen = false;\n\n        self.isChanged = false;\n\n        self.name.subscribe(function(newValue) {\n            self.isChanged = true;\n        })\n        self.quantity.subscribe(function(newValue) {\n            self.isChanged = true;\n        })\n        self.buyPrice.subscribe(function(newVal) {\n            self.isChanged = true;\n        })\n        self.sellPrice.subscribe(function(newVal) {\n            self.isChanged = true;\n        })\n\n    }\n\n    var OrderModel = function(order, swiper) {\n        var self = this;\n\n        self._id = ko.observable(order ? order._id : '');\n        self.client = ko.observable(order ? order.client : '');\n        self.postage = ko.observable(order && order.postage ? order.postage : 0);\n\n\n        var observableItems = [];\n\n        if (order && $.isArray(order.items) && order.items.length > 0) {\n            order.items.forEach(function(item) {\n                observableItems.push(new Item(item));\n            });\n\n        } else {\n            for (var i = 0; i < 3; i++) {\n                observableItems.push(new Item());\n            }\n\n        }\n\n        self.isChanged = false;\n\n        self.items = ko.observableArray(observableItems);\n\n        self.items.subscribe(function(newValue) {\n            self.isChanged = true;\n\n\n        })\n        self.client.subscribe(function(newValue) {\n\n            self.isChanged = true;\n\n        })\n        self.postage.subscribe(function(newValue) {\n            self.isChanged = true;\n\n\n        })\n\n\n\n        self.createDate = ko.observable(order ? order.createDate : '');\n        self.displayDate = ko.observable(order ? order.displayDate : '');\n\n\n\n        self.rate = order ? order.rate : '';\n\n        self.buyPrice = ko.observable(order && order.buyPrice ? order.buyPrice : '');\n        self.sellPrice = ko.observable(order && order.sellPrice ? order.sellPrice : '');\n        self.profit = ko.observable(order && order.profit ? order.profit : '');\n        self.isComplete = ko.observable(order && order.isComplete ? order.isComplete : false);\n\n        self.formatPrice = function(price) {\n\n            if (!price) return '?';\n\n            var purePrice = price();\n            if (purePrice) {\n                return (+purePrice).toFixed(1);\n            } else {\n                return '?'\n            }\n        }\n\n\n        self.total = ko.pureComputed(function() {\n            var sellPrice = parseFloat(this.sellPrice());\n            var postage = parseFloat(this.postage());\n            if (isNaN(sellPrice) || isNaN(postage)) {\n                return '?';\n            } else {\n                return (sellPrice + postage).toFixed(1);\n            }\n        }, self);\n\n\n        var dateFormatting = {\n            month: \"2-digit\",\n            day: \"numeric\",\n            weekday: \"short\"\n        };\n\n\n        /*self.displayDate = function() {\n\n            var createDate = self.createDate()\n\n            return createDate ? new Date(createDate).toLocaleDateString(\"en-US\", dateFormatting) : '';\n\n        };*/\n\n        self.status = ko.observable(order ? order.status : '1RECEIVED');\n\n        self.packingStatus = order ? order.packingStatus : '1ISREADY';\n\n        self.orderStatus = ko.pureComputed(function() {\n            if (self.status() == '3DONE') {\n                return 'font-green';\n            } else if (self.status() == '2SENT') {\n                return 'font-yellow';\n            }\n        });\n\n        self.getHistoricTrades = function(item, parent, event) {\n\n            var itemData = ko.mapping.toJS(item);\n\n            var $historicTrades = $(event.target).closest('.item').find('.historicbox');\n\n            if (!item.isHistoricTradesOpen) {\n\n                var succeed = arguments[4]\n\n                if (itemData.name == '') return;\n\n                arguments[3]();\n\n                $.getJSON('./historictrades', {\n                    'itemName': itemData.name\n                }, function(res, status) {\n\n                    status == 'success' ? item.historicTrades(res) : item.historicTrades([]);\n\n\n                    $historicTrades.slideDown('fast', function() {\n                        item.isHistoricTradesOpen = true;\n\n                        succeed();\n                    });\n\n                });\n\n            } else {\n\n                $historicTrades.slideUp('fast', function() {\n                    item.isHistoricTradesOpen = false;\n                    swiper.update();\n                });\n            }\n        };\n\n        self.hasHistoricTrades = function(item) {\n\n            return item.historicTrades().length > 0 ? true : false;\n\n        };\n\n        self.addItem = function() {\n\n            self.items.unshift(new Item());\n            swiper.update();\n        };\n\n        self.removeItem = function(item) {\n            self.items.remove(item);\n            swiper.update();\n        };\n\n\n\n        self.addAddress = function(address) {\n\n            self.addresses.unshift({\n                _id: \"\",\n                client: self.client(),\n                recipient: \"\",\n                address: \"\",\n                phone: \"\"\n            });\n            swiper.update();\n\n        };\n\n        self.getAddresses = function(order) {\n            arguments[3]();\n            var succeed = arguments[4];\n\n            var client = order.client();\n\n            if (client == '') return;\n\n            $.getJSON('./addressesByClient', {\n                client: client\n            }, function(res, status) {\n\n                status == 'success' ? order.addresses(res) : order.addresses([]);\n                succeed();\n\n            });\n\n\n        };\n\n        var removedAddresses = [];\n\n        self.removeAddress = function(address) {\n\n            if (address._id != '') {\n\n                removedAddresses.push(address._id);\n\n            }\n\n            self.addresses.remove(address);\n            swiper.update();\n\n\n        };\n\n        self.submitAddresses = function(order) {\n            arguments[3]();\n            var succeed = arguments[4];\n\n            var addressesData = ko.mapping.toJS(order.addresses);\n\n\n            $.post('./addresses', {\n                    \"client\": order.client,\n                    \"addresses\": addressesData\n                }, function(addresses, status) {\n\n                    order.addresses(addresses);\n\n                    succeed();\n                },\n                'json'\n            );\n\n            return false;\n\n        };\n\n\n        self.submitOrder = function(order) {\n            arguments[3]();\n            var succeed = arguments[4];\n\n            var orderData = $.parseJSON(ko.toJSON(order));\n\n            $.post('./order', orderData, function(data, status) {\n\n                    data.items.forEach(function(item) {\n\n                        item.historicTrades = [];\n\n                    });\n\n                    console.log('get post result');\n                    ko.mapping.fromJS(data, {}, order);\n\n\n                },\n                'json'\n            );\n\n            return false;\n\n        };\n\n\n    };\n\n\n\n    var OrdersModel = function(orders, swiper) {\n\n\n        var self = this;\n\n        var startDate = getDoneOrderStartDate();\n\n        self.updateReservedOrders = function (orders) {\n\n            reservedOrders = orders;\n\n        }\n\n        self.sortOrders = function(orders) {\n\n            orders.sort(function(orderA, orderB) {\n\n                var aStatus = orderA.status();\n                var bStatus = orderB.status()\n\n                if (aStatus == bStatus) {\n\n                    return orderA.createDate() <= orderB.createDate() ? 1 : -1;\n\n                } else {\n                    return aStatus < bStatus ? -1 : 1;\n                }\n\n            })\n\n        }\n\n        self.getObservableOrders = function(orders) {\n            var observableOrders = [];\n\n            orders.forEach(function(order) {\n\n                observableOrders.push(new OrderModel(order, swiper));\n\n            })\n            return observableOrders;\n\n        };\n\n        var observableOrders = self.getObservableOrders(orders);\n\n        self.orders = ko.observableArray(observableOrders);\n\n        self.toggleClientView = function(data, parent, event) {\n\n            $(event.target).toggleClass('icon-eyeslash');\n\n\n            var $orders = $('.orders--reckoning');\n\n            if ($(event.target).hasClass('icon-eyeslash')) {\n                $orders.addClass(\"isClientView\");\n\n            } else {\n                $orders.removeClass(\"isClientView\");\n            }\n\n            swiper.update();\n\n\n        };\n\n        self.markDone = function(order) {\n            arguments[3]();\n            var succeed = arguments[4];\n            var parent = arguments[1];\n            var id = order._id();\n\n            var orderStatus = order.status();\n\n            var newStatus = '1RECEIVED';\n\n            if (orderStatus == '1RECEIVED') {\n                newStatus = '2SENT'\n\n            } else if (orderStatus == '2SENT') {\n                newStatus = '3DONE'\n\n            }\n\n            $.ajax('./orderStatus/' + id, {\n                success: function(data, status) {\n\n                    order.status(newStatus)\n\n                    var orders = self.orders();\n\n                    if ($('#search-reckoningOrders').val() == '') {\n\n                        if (newStatus == '3DONE' && order.createDate() < startDate) {\n                            self.removeDoneOrder(order)\n\n                        }\n\n                        //  else if (orderStatus == '3DONE' && self.createDate() < startDate) {\n                        //     self.addExistingOrder(self)\n\n                        // }\n\n                        self.sortOrders(orders);\n\n                        self.orders(orders);\n\n                        self.updateReservedOrders(orders);\n\n                    }else{\n                        needRefresh=true;\n                    }\n\n\n\n\n                    succeed(true);\n\n                },\n                data: {\n                    'status': newStatus\n                },\n                dataType: 'json',\n                type: 'PUT'\n\n            });\n\n        }\n\n\n        self.submitOrders = function() {\n            arguments[3]();\n            var succeed = arguments[4];\n\n            var orders = self.orders();\n            var ordersData = $.parseJSON(ko.toJSON(orders)); //$.parseJSON(ko.toJSON(order));\n\n            if (Array.isArray(ordersData) && ordersData.length > 0) {\n\n                var changedIndexs = [];\n\n                var changedOrders = ordersData.filter(function(order, index) {\n\n                    var isChanged = false;\n\n                    if (order.isChanged) {\n                        isChanged = true;\n                    } else {\n                        for (var i = 0; i < order.items.length; i++) {\n                            if (order.items[i].isChanged) {\n                                isChanged = true;\n                                break;\n                            }\n                        }\n                    }\n\n                    if (isChanged) {\n                        changedIndexs.push(index);\n                    }\n\n                    return isChanged;\n\n                })\n\n                if (changedOrders.length > 0) {\n                    $.post('/orders', {\n                            orders: changedOrders\n                        }, function(rs, status) {\n\n                            rs.forEach(function(newOrder, index) {\n                                var orderIndex = changedIndexs[index];\n\n                                if ($.isArray(newOrder.items) && newOrder.items.length == 0) {\n                                    newOrder.items = [{}, {}, {}];\n                                }\n\n                                newOrder.items.forEach(function(item) {\n                                    item.historicTrades = [];\n                                });\n\n                                ko.mapping.fromJS(newOrder, {\n                                    items: {\n                                        create: function(option) {\n                                            return new Item(option.data);\n\n                                        }\n                                    }\n                                }, orders[orderIndex]);\n\n                                orders[orderIndex].isChanged = false;\n                                // orders[orderIndex].items().forEach(function(item){\n                                //     item.isChanged=false;\n\n                                // })\n\n                            })\n\n                            succeed(true);\n\n                        },\n                        'json'\n                    );\n                } else {\n                    succeed();\n                }\n\n\n            }\n\n\n            return false;\n\n        };\n\n        self.addOrder = function() {\n\n\n            var order = new OrderModel(null, swiper);\n\n            self.orders.unshift(order);\n\n            self.updateReservedOrders(self.orders());\n\n            swiper.update();\n            $(window).scrollTop(0);\n        };\n        self.addExistingOrder = function(order) {\n            // if (reservedOrders != null) {\n\n            //     var existingOrder = reservedOrders.find(function(ele) {\n            //         return ele._id == order._id;\n            //     });\n\n            //     if (!existingOrder) {\n            //         reservedOrders.unshift(order);\n            //     }\n\n            // }\n\n\n\n            self.orders.push(doneOrder);\n\n\n\n        };\n        self.removeDoneOrder = function(doneOrder) {\n\n            // var id = doneOrder._id();\n\n            // if (reservedOrders != null) {\n\n            //     var newOrders = reservedOrders.filter(function(order) {\n\n            //         return order._id() != id;\n\n            //     });\n\n            //     reservedOrders = newOrders;\n\n            // }\n\n\n\n            self.orders.remove(doneOrder);\n\n\n        };\n        self.removeOrder = function(order) {\n\n            arguments[3]();\n            var succeed = arguments[4];\n\n            var id = order._id();\n            self.orders.remove(order);\n\n            if (id == '') {\n\n                succeed();\n                return;\n            }\n\n\n\n            $.ajax('./order/' + id, {\n                success: function(data, status) {\n\n                    succeed(true);\n\n\n                },\n                dataType: 'json',\n                type: 'DELETE'\n\n            });\n\n            self.updateReservedOrders(self.orders());\n\n            swiper.update();\n\n        };\n\n\n\n        var reservedOrders = null;\n        var needRefresh= false;\n        self.searchOrders = function(data, event) {\n\n\n            var keywords = $(event.target).val();\n\n            var regex = /(\\s*)([\\u4E00-\\u9FA5\\uF900-\\uFA2D\\w]+[\\u4E00-\\u9FA5\\uF900-\\uFA2D\\w ]*)/;\n\n\n            var matchedRes = keywords.match(regex);\n\n            if (reservedOrders == null) {\n\n                reservedOrders = self.orders();\n\n            }\n\n            // if (matchedRes == null) {\n            //     self.sortOrders(reservedOrders);\n\n            //     self.orders(reservedOrders);\n            // }\n\n            if (matchedRes != null) {\n\n                if (matchedRes[1] == \"\") {\n                    searchCurrentOrders(matchedRes[2])\n\n                } else {\n                    searchGlobalOrders(matchedRes[2])\n                }\n\n            } else if (needRefresh){\n\n                $.getJSON('./reckoningOrdersJson', function(orders, status) {\n\n                    var observableOrders = self.getObservableOrders(orders);\n\n                    reservedOrders=observableOrders;\n                    needRefresh=false;\n\n                    self.orders(observableOrders);\n\n                    setTimeout(function() {\n                        swiper.update();\n                    }, 100);\n\n                })\n\n            }else if (reservedOrders != null) {\n\n                newKeywords = '';\n\n                self.sortOrders(reservedOrders);\n                self.orders(reservedOrders);\n                setTimeout(function() {\n                    swiper.update();\n                }, 100)\n            }\n\n        }\n\n        function searchCurrentOrders(keywords) {\n\n\n            var searchedOrders = reservedOrders.filter(function(order) {\n\n                return order.client().indexOf(keywords) >= 0;\n            });\n\n            self.orders(searchedOrders);\n            setTimeout(function() {\n                swiper.update();\n            }, 100)\n        }\n\n        var timeoutIds = [];\n\n        var newKeywords = '';\n\n        function searchGlobalOrders(keywords) {\n\n            newKeywords = keywords;\n\n            var id = setTimeout(function() {\n\n\n                for (var i = 1; i < timeoutIds.length; i++) {\n                    clearTimeout(timeoutIds[i]);\n                }\n\n                timeoutIds = [];\n\n                if (newKeywords != '') {\n\n                    $.ajax('./ordersByName', {\n                        data: {\n                            client: newKeywords\n                        },\n                        type: 'GET',\n                        success: function(data, status) {\n\n                            self.orders(self.getObservableOrders(data));\n                            setTimeout(function() {\n                                swiper.update();\n                            }, 100);\n\n                        },\n\n                        dataType: 'json'\n\n                    });\n\n\n\n                }\n\n                console.log('i am searching ' + newKeywords);\n\n            }, 1000);\n\n            timeoutIds.push(id);\n\n\n        }\n\n\n    };\n\n    return OrdersModel;\n\n\n})"]}