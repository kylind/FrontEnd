{"version":3,"sources":["public/js/reckoning-orders.js"],"names":["define","$","ko","mapping","getDoneOrderStartDate","currentMiliSeconds","Date","now","currentDay","getDay","startMiliSeconds","startDate","setHours","Item","item","this","self","name","observable","quantity","buyPrice","isNaN","sellPrice","profit","note","isDone","tag","historicTrades","observableArray","isHistoricTradesOpen","isChanged","subscribe","newValue","newVal","OrderModel","order","swiper","client","postage","observableItems","items","length","forEach","push","i","createDate","rate","displayDate","purePrice","toFixed","isComplete","formatPrice","parseFloat","price","total","pureComputed","status","packingStatus","orderStatus","arguments","getJSON","getHistoricTrades","parent","event","succeed","$historicTrades","slideUp","addAddress","update","itemName","itemData","hasHistoricTrades","res","slideDown","address","getAddresses","removeItem","remove","addresses","unshift","_id","removedAddresses","recipient","removeAddress","phone","submitAddresses","addressesData","post","data","console","toJS","OrdersModel","updateReservedOrders","reservedOrders","sortOrders","submitOrder","bStatus","orderB","orderData","aStatus","orderA","log","fromJS","orders","hasClass","searchCurrentOrders","keywords","searchedOrders","filter","indexOf","setTimeout","searchGlobalOrders","newKeywords","id","timeoutIds","clearTimeout","ajax","type","success","getObservableOrders","dataType","$orders","newStatus","observableOrders","removeDoneOrder","toggleClientView","target","toggleClass","addClass","removeClass","markDone","ordersData","isArray","changedIndexs","val","newOrder","needRefresh","submitOrders","parseJSON","toJSON","Array","addOrder","index","changedOrders","doneOrder","rs","orderIndex","create","option","regex","matchedRes","window","scrollTop","addExistingOrder","removeOrder","match"],"mappings":"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","file":"reckoning-orders.js","sourcesContent":["define(['jquery', 'knockout', 'knockout.mapping'], function($, ko, mapping) {\n\n    ko.mapping = mapping;\n\n\n    function getDoneOrderStartDate() {\n\n        var currentMiliSeconds = Date.now();\n\n        var currentDay = new Date().getDay();\n\n        var startMiliSeconds = currentMiliSeconds - ((currentDay + 7) * 24 * 60 * 60 * 1000);\n\n        var startDate = new Date(new Date(startMiliSeconds).setHours(0, 0, 0, 0));\n\n        return startDate;\n    }\n\n    var Item = function(item) {\n        var self = this;\n\n\n        self.name = ko.observable(item && item.name ? item.name : '');\n        self.quantity = ko.observable(item && item.quantity ? item.quantity : '1');\n        self.buyPrice = ko.observable(item && !isNaN(item.buyPrice) ? item.buyPrice : '');\n        self.sellPrice = ko.observable(item && !isNaN(item.sellPrice) ? item.sellPrice : '');\n        self.profit = item && item.profit ? item.profit : '';\n        self.note = item && item.note ? item.note : '';\n        self.isDone = item && item.isDone ? item.isDone : false;\n        self.tag= item && item.tag ? item.tag : '';\n\n        self.historicTrades = ko.observableArray([]);\n\n        self.isHistoricTradesOpen = false;\n\n        self.isChanged = false;\n\n        self.name.subscribe(function(newValue) {\n            self.isChanged = true;\n        })\n        self.quantity.subscribe(function(newValue) {\n            self.isChanged = true;\n        })\n        self.buyPrice.subscribe(function(newVal) {\n            self.isChanged = true;\n        })\n        self.sellPrice.subscribe(function(newVal) {\n            self.isChanged = true;\n        })\n\n    }\n\n    var OrderModel = function(order, swiper) {\n        var self = this;\n\n        self._id = ko.observable(order ? order._id : '');\n        self.client = ko.observable(order ? order.client : '');\n        self.postage = ko.observable(order && order.postage ? order.postage : 0);\n\n\n        var observableItems = [];\n\n        if (order && $.isArray(order.items) && order.items.length > 0) {\n            order.items.forEach(function(item) {\n                observableItems.push(new Item(item));\n            });\n\n        } else {\n            for (var i = 0; i < 3; i++) {\n                observableItems.push(new Item());\n            }\n\n        }\n\n        self.isChanged = false;\n\n        self.items = ko.observableArray(observableItems);\n\n        self.items.subscribe(function(newValue) {\n            self.isChanged = true;\n\n\n        })\n        self.client.subscribe(function(newValue) {\n\n            self.isChanged = true;\n\n        })\n        self.postage.subscribe(function(newValue) {\n            self.isChanged = true;\n\n\n        })\n\n\n\n        self.createDate = ko.observable(order ? order.createDate : '');\n        self.displayDate = ko.observable(order ? order.displayDate : '');\n\n\n\n        self.rate = order ? order.rate : '';\n\n        self.buyPrice = ko.observable(order && order.buyPrice ? order.buyPrice : '');\n        self.sellPrice = ko.observable(order && order.sellPrice ? order.sellPrice : '');\n        self.profit = ko.observable(order && order.profit ? order.profit : '');\n        self.isComplete = ko.observable(order && order.isComplete ? order.isComplete : false);\n\n        self.formatPrice = function(price) {\n\n            if (!price) return '?';\n\n            var purePrice = price();\n            if (purePrice) {\n                return (+purePrice).toFixed(1);\n            } else {\n                return '?'\n            }\n        }\n\n\n        self.total = ko.pureComputed(function() {\n            var sellPrice = parseFloat(this.sellPrice());\n            var postage = parseFloat(this.postage());\n            if (isNaN(sellPrice) || isNaN(postage)) {\n                return '?';\n            } else {\n                return (sellPrice + postage).toFixed(1);\n            }\n        }, self);\n\n\n        var dateFormatting = {\n            month: \"2-digit\",\n            day: \"numeric\",\n            weekday: \"short\"\n        };\n\n\n        /*self.displayDate = function() {\n\n            var createDate = self.createDate()\n\n            return createDate ? new Date(createDate).toLocaleDateString(\"en-US\", dateFormatting) : '';\n\n        };*/\n\n        self.status = ko.observable(order ? order.status : '1RECEIVED');\n\n        self.packingStatus = order ? order.packingStatus : '1ISREADY';\n\n        self.orderStatus = ko.pureComputed(function() {\n            if (self.status() == '3DONE') {\n                return 'font-green';\n            } else if (self.status() == '2SENT') {\n                return 'font-yellow';\n            }\n        });\n\n        self.getHistoricTrades = function(item, parent, event) {\n\n            var itemData = ko.mapping.toJS(item);\n\n            var $historicTrades = $(event.target).closest('.item').find('.historicbox');\n\n            if (!item.isHistoricTradesOpen) {\n\n                var succeed = arguments[4]\n\n                if (itemData.name == '') return;\n\n                arguments[3]();\n\n                $.getJSON('./historictrades', {\n                    'itemName': itemData.name\n                }, function(res, status) {\n\n                    status == 'success' ? item.historicTrades(res) : item.historicTrades([]);\n\n\n                    $historicTrades.slideDown('fast', function() {\n                        item.isHistoricTradesOpen = true;\n\n                        succeed();\n                    });\n\n                });\n\n            } else {\n\n                $historicTrades.slideUp('fast', function() {\n                    item.isHistoricTradesOpen = false;\n                    swiper.update();\n                });\n            }\n        };\n\n        self.hasHistoricTrades = function(item) {\n\n            return item.historicTrades().length > 0 ? true : false;\n\n        };\n\n        self.addItem = function() {\n\n            self.items.unshift(new Item());\n            swiper.update();\n        };\n\n        self.removeItem = function(item) {\n            self.items.remove(item);\n            swiper.update();\n        };\n\n\n\n        self.addAddress = function(address) {\n\n            self.addresses.unshift({\n                _id: \"\",\n                client: self.client(),\n                recipient: \"\",\n                address: \"\",\n                phone: \"\"\n            });\n            swiper.update();\n\n        };\n\n        self.getAddresses = function(order) {\n            arguments[3]();\n            var succeed = arguments[4];\n\n            var client = order.client();\n\n            if (client == '') return;\n\n            $.getJSON('./addressesByClient', {\n                client: client\n            }, function(res, status) {\n\n                status == 'success' ? order.addresses(res) : order.addresses([]);\n                succeed();\n\n            });\n\n\n        };\n\n        var removedAddresses = [];\n\n        self.removeAddress = function(address) {\n\n            if (address._id != '') {\n\n                removedAddresses.push(address._id);\n\n            }\n\n            self.addresses.remove(address);\n            swiper.update();\n\n\n        };\n\n        self.submitAddresses = function(order) {\n            arguments[3]();\n            var succeed = arguments[4];\n\n            var addressesData = ko.mapping.toJS(order.addresses);\n\n\n            $.post('./addresses', {\n                    \"client\": order.client,\n                    \"addresses\": addressesData\n                }, function(addresses, status) {\n\n                    order.addresses(addresses);\n\n                    succeed();\n                },\n                'json'\n            );\n\n            return false;\n\n        };\n\n\n        self.submitOrder = function(order) {\n            arguments[3]();\n            var succeed = arguments[4];\n\n            var orderData = $.parseJSON(ko.toJSON(order));\n\n            $.post('./order', orderData, function(data, status) {\n\n                    data.items.forEach(function(item) {\n\n                        item.historicTrades = [];\n\n                    });\n\n                    console.log('get post result');\n                    ko.mapping.fromJS(data, {}, order);\n\n\n                },\n                'json'\n            );\n\n            return false;\n\n        };\n\n\n    };\n\n\n\n    var OrdersModel = function(orders, swiper) {\n\n\n        var self = this;\n\n        var startDate = getDoneOrderStartDate();\n\n        self.updateReservedOrders = function (orders) {\n\n            reservedOrders = orders;\n\n        }\n\n        self.sortOrders = function(orders) {\n\n            orders.sort(function(orderA, orderB) {\n\n                var aStatus = orderA.status();\n                var bStatus = orderB.status()\n\n                if (aStatus == bStatus) {\n\n                    return orderA.createDate() <= orderB.createDate() ? 1 : -1;\n\n                } else {\n                    return aStatus < bStatus ? -1 : 1;\n                }\n\n            })\n\n        }\n\n        self.getObservableOrders = function(orders) {\n            var observableOrders = [];\n\n            orders.forEach(function(order) {\n\n                observableOrders.push(new OrderModel(order, swiper));\n\n            })\n            return observableOrders;\n\n        };\n\n        var observableOrders = self.getObservableOrders(orders);\n\n        self.orders = ko.observableArray(observableOrders);\n\n        self.toggleClientView = function(data, parent, event) {\n\n            $(event.target).toggleClass('icon-eyeslash');\n\n\n            var $orders = $('.orders--reckoning');\n\n            if ($(event.target).hasClass('icon-eyeslash')) {\n                $orders.addClass(\"isClientView\");\n\n            } else {\n                $orders.removeClass(\"isClientView\");\n            }\n\n            swiper.update();\n\n\n        };\n\n        self.markDone = function(order) {\n            arguments[3]();\n            var succeed = arguments[4];\n            var parent = arguments[1];\n            var id = order._id();\n\n            var orderStatus = order.status();\n\n            var newStatus = '1RECEIVED';\n\n            if (orderStatus == '1RECEIVED') {\n                newStatus = '2SENT'\n\n            } else if (orderStatus == '2SENT') {\n                newStatus = '3DONE'\n\n            }\n\n            $.ajax('./orderStatus/' + id, {\n                success: function(data, status) {\n\n                    order.status(newStatus)\n\n                    var orders = self.orders();\n\n                    if ($('#search-reckoningOrders').val() == '') {\n\n                        if (newStatus == '3DONE' && order.createDate() < startDate) {\n                            self.removeDoneOrder(order)\n\n                        }\n\n                        //  else if (orderStatus == '3DONE' && self.createDate() < startDate) {\n                        //     self.addExistingOrder(self)\n\n                        // }\n\n                        self.sortOrders(orders);\n\n                        self.orders(orders);\n\n                        self.updateReservedOrders(orders);\n\n                    }else{\n                        needRefresh=true;\n                    }\n\n\n\n\n                    succeed(true);\n\n                },\n                data: {\n                    'status': newStatus\n                },\n                dataType: 'json',\n                type: 'PUT'\n\n            });\n\n        }\n\n\n        self.submitOrders = function() {\n            arguments[3]();\n            var succeed = arguments[4];\n\n            var orders = self.orders();\n            var ordersData = $.parseJSON(ko.toJSON(orders)); //$.parseJSON(ko.toJSON(order));\n\n            if (Array.isArray(ordersData) && ordersData.length > 0) {\n\n                var changedIndexs = [];\n\n                var changedOrders = ordersData.filter(function(order, index) {\n\n                    var isChanged = false;\n\n                    if (order.isChanged) {\n                        isChanged = true;\n                    } else {\n                        for (var i = 0; i < order.items.length; i++) {\n                            if (order.items[i].isChanged) {\n                                isChanged = true;\n                                break;\n                            }\n                        }\n                    }\n\n                    if (isChanged) {\n                        changedIndexs.push(index);\n                    }\n\n                    return isChanged;\n\n                })\n\n                if (changedOrders.length > 0) {\n                    $.post('/orders', {\n                            orders: changedOrders\n                        }, function(rs, status) {\n\n                            rs.forEach(function(newOrder, index) {\n                                var orderIndex = changedIndexs[index];\n\n                                if ($.isArray(newOrder.items) && newOrder.items.length == 0) {\n                                    newOrder.items = [{}, {}, {}];\n                                }\n\n                                newOrder.items.forEach(function(item) {\n                                    item.historicTrades = [];\n                                });\n\n                                ko.mapping.fromJS(newOrder, {\n                                    items: {\n                                        create: function(option) {\n                                            return new Item(option.data);\n\n                                        }\n                                    }\n                                }, orders[orderIndex]);\n\n                                orders[orderIndex].isChanged = false;\n                                // orders[orderIndex].items().forEach(function(item){\n                                //     item.isChanged=false;\n\n                                // })\n\n                            })\n\n                            succeed(true);\n\n                        },\n                        'json'\n                    );\n                } else {\n                    succeed();\n                }\n\n\n            }\n\n            if ($('#search-reckoningOrders').val() != '') {\n\n                needRefresh=true;\n            }\n\n\n            return false;\n\n        };\n\n        self.addOrder = function() {\n\n\n            var order = new OrderModel(null, swiper);\n\n            self.orders.unshift(order);\n\n            self.updateReservedOrders(self.orders());\n\n            swiper.update();\n            $(window).scrollTop(0);\n        };\n        self.addExistingOrder = function(order) {\n            // if (reservedOrders != null) {\n\n            //     var existingOrder = reservedOrders.find(function(ele) {\n            //         return ele._id == order._id;\n            //     });\n\n            //     if (!existingOrder) {\n            //         reservedOrders.unshift(order);\n            //     }\n\n            // }\n\n\n\n            self.orders.push(doneOrder);\n\n\n\n        };\n        self.removeDoneOrder = function(doneOrder) {\n\n            // var id = doneOrder._id();\n\n            // if (reservedOrders != null) {\n\n            //     var newOrders = reservedOrders.filter(function(order) {\n\n            //         return order._id() != id;\n\n            //     });\n\n            //     reservedOrders = newOrders;\n\n            // }\n\n\n\n            self.orders.remove(doneOrder);\n\n\n        };\n        self.removeOrder = function(order) {\n\n            arguments[3]();\n            var succeed = arguments[4];\n\n            var id = order._id();\n            self.orders.remove(order);\n\n            if (id == '') {\n\n                succeed();\n                return;\n            }\n\n\n\n            $.ajax('./order/' + id, {\n                success: function(data, status) {\n\n                    succeed(true);\n\n\n                },\n                dataType: 'json',\n                type: 'DELETE'\n\n            });\n\n            self.updateReservedOrders(self.orders());\n\n            swiper.update();\n\n        };\n\n\n\n        var reservedOrders = null;\n        var needRefresh= false;\n        self.searchOrders = function(data, event) {\n\n\n            var keywords = $(event.target).val();\n\n            var regex = /(\\s*)([\\u4E00-\\u9FA5\\uF900-\\uFA2D\\w]+[\\u4E00-\\u9FA5\\uF900-\\uFA2D\\w ]*)/;\n\n\n            var matchedRes = keywords.match(regex);\n\n            if (reservedOrders == null) {\n\n                reservedOrders = self.orders();\n\n            }\n\n            // if (matchedRes == null) {\n            //     self.sortOrders(reservedOrders);\n\n            //     self.orders(reservedOrders);\n            // }\n\n            if (matchedRes != null) {\n\n                if (matchedRes[1] == \"\") {\n                    searchCurrentOrders(matchedRes[2])\n\n                } else {\n                    searchGlobalOrders(matchedRes[2])\n                }\n\n            } else if (needRefresh){\n\n                $.getJSON('./reckoningOrdersJson', function(orders, status) {\n\n                    var observableOrders = self.getObservableOrders(orders);\n\n                    reservedOrders=observableOrders;\n                    needRefresh=false;\n\n                    self.orders(observableOrders);\n\n                    setTimeout(function() {\n                        swiper.update();\n                    }, 100);\n\n                })\n\n            }else if (reservedOrders != null) {\n\n                newKeywords = '';\n\n                self.sortOrders(reservedOrders);\n                self.orders(reservedOrders);\n                setTimeout(function() {\n                    swiper.update();\n                }, 100)\n            }\n\n        }\n\n        function searchCurrentOrders(keywords) {\n\n\n            var searchedOrders = reservedOrders.filter(function(order) {\n\n                return order.client().indexOf(keywords) >= 0;\n            });\n\n            self.orders(searchedOrders);\n            setTimeout(function() {\n                swiper.update();\n            }, 100)\n        }\n\n        var timeoutIds = [];\n\n        var newKeywords = '';\n\n        function searchGlobalOrders(keywords) {\n\n            newKeywords = keywords;\n\n            var id = setTimeout(function() {\n\n\n                for (var i = 1; i < timeoutIds.length; i++) {\n                    clearTimeout(timeoutIds[i]);\n                }\n\n                timeoutIds = [];\n\n                if (newKeywords != '') {\n\n                    $.ajax('./ordersByName', {\n                        data: {\n                            client: newKeywords\n                        },\n                        type: 'GET',\n                        success: function(data, status) {\n\n                            self.orders(self.getObservableOrders(data));\n                            setTimeout(function() {\n                                swiper.update();\n                            }, 100);\n\n                        },\n\n                        dataType: 'json'\n\n                    });\n\n\n\n                }\n\n                console.log('i am searching ' + newKeywords);\n\n            }, 1000);\n\n            timeoutIds.push(id);\n\n\n        }\n\n\n    };\n\n    return OrdersModel;\n\n\n})"]}